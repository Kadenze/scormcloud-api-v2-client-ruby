=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module RusticiSoftwareCloudV2
  class RegistrationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get registration launch link. 
    # Returns the link to use to launch this registration. 
    # @param registration_id id for this registration
    # @param launch_link_request 
    # @param [Hash] opts the optional parameters
    # @return [LaunchLinkSchema]
    def build_registration_launch_link(registration_id, launch_link_request, opts = {})
      data, _status_code, _headers = build_registration_launch_link_with_http_info(registration_id, launch_link_request, opts)
      return data
    end

    # Get registration launch link. 
    # Returns the link to use to launch this registration. 
    # @param registration_id id for this registration
    # @param launch_link_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LaunchLinkSchema, Fixnum, Hash)>] LaunchLinkSchema data, response status code and response headers
    def build_registration_launch_link_with_http_info(registration_id, launch_link_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.build_registration_launch_link ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.build_registration_launch_link" if registration_id.nil?
      # verify the required parameter 'launch_link_request' is set
      fail ArgumentError, "Missing the required parameter 'launch_link_request' when calling RegistrationApi.build_registration_launch_link" if launch_link_request.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}/launchLink".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(launch_link_request)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LaunchLinkSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#build_registration_launch_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create a new instance for this registration specified by the registration ID. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_new_registration_instance(registration_id, opts = {})
      create_new_registration_instance_with_http_info(registration_id, opts)
      return nil
    end

    # 
    # Create a new instance for this registration specified by the registration ID. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_new_registration_instance_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.create_new_registration_instance ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.create_new_registration_instance" if registration_id.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}/instances".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#create_new_registration_instance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a registration. 
    # This method is used to create a new registration. A registration will contain a few pieces of information such as a learner name, a learner id, and optionally, information about where activity data should be posted (for client consumption), as well as a way to specify simple authentication schemes for posting said data. A registration must be tied to a specific course at creation time. When the created registration is “launched”, the course specified at creation time will be launched. 
    # @param registration 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :course_version The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to.
    # @return [nil]
    def create_registration(registration, opts = {})
      create_registration_with_http_info(registration, opts)
      return nil
    end

    # Create a registration. 
    # This method is used to create a new registration. A registration will contain a few pieces of information such as a learner name, a learner id, and optionally, information about where activity data should be posted (for client consumption), as well as a way to specify simple authentication schemes for posting said data. A registration must be tied to a specific course at creation time. When the created registration is “launched”, the course specified at creation time will be launched. 
    # @param registration 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :course_version The version of the course you want to create the registration for. Unless you have a reason for using this you probably do not need to.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_registration_with_http_info(registration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.create_registration ..."
      end
      # verify the required parameter 'registration' is set
      fail ArgumentError, "Missing the required parameter 'registration' when calling RegistrationApi.create_registration" if registration.nil?
      # resource path
      local_var_path = "/registrations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'courseVersion'] = opts[:'course_version'] if !opts[:'course_version'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(registration)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#create_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a registration. 
    # Delete `registrationId`.  This includes all instances of this registration. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration(registration_id, opts = {})
      delete_registration_with_http_info(registration_id, opts)
      return nil
    end

    # Delete a registration. 
    # Delete &#x60;registrationId&#x60;.  This includes all instances of this registration. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.delete_registration ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration" if registration_id.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear a registration configuration. 
    # Clears the `settingId` value for this registration. The effective value will become the value at the next level which has an explicit value set.  Possibilities are course, application, or default. 
    # @param registration_id id for this registration
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_configuration_setting(registration_id, setting_id, opts = {})
      delete_registration_configuration_setting_with_http_info(registration_id, setting_id, opts)
      return nil
    end

    # Clear a registration configuration. 
    # Clears the &#x60;settingId&#x60; value for this registration. The effective value will become the value at the next level which has an explicit value set.  Possibilities are course, application, or default. 
    # @param registration_id id for this registration
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_configuration_setting_with_http_info(registration_id, setting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.delete_registration_configuration_setting ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration_configuration_setting" if registration_id.nil?
      # verify the required parameter 'setting_id' is set
      fail ArgumentError, "Missing the required parameter 'setting_id' when calling RegistrationApi.delete_registration_configuration_setting" if setting_id.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}/configuration/{settingId}".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'settingId' + '}', setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration_configuration_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the global data of a registration. 
    # Delete global data associated with `registrationId`'.  Calling this method will reset all global objectives associated with this registration, if any exist. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_global_data(registration_id, opts = {})
      delete_registration_global_data_with_http_info(registration_id, opts)
      return nil
    end

    # Delete the global data of a registration. 
    # Delete global data associated with &#x60;registrationId&#x60;&#39;.  Calling this method will reset all global objectives associated with this registration, if any exist. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_global_data_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.delete_registration_global_data ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration_global_data" if registration_id.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}/globalData".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration_global_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear a configuration for an instance of a registration. 
    # Clears the `settingId` value for this registration instance. 
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_instance_configuration_setting(registration_id, instance_id, setting_id, opts = {})
      delete_registration_instance_configuration_setting_with_http_info(registration_id, instance_id, setting_id, opts)
      return nil
    end

    # Clear a configuration for an instance of a registration. 
    # Clears the &#x60;settingId&#x60; value for this registration instance. 
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_instance_configuration_setting_with_http_info(registration_id, instance_id, setting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.delete_registration_instance_configuration_setting ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration_instance_configuration_setting" if registration_id.nil?
      # verify the required parameter 'instance_id' is set
      fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.delete_registration_instance_configuration_setting" if instance_id.nil?
      if instance_id < 0
        fail ArgumentError, 'invalid value for "instance_id" when calling RegistrationApi.delete_registration_instance_configuration_setting, must be greater than or equal to 0.'
      end

      # verify the required parameter 'setting_id' is set
      fail ArgumentError, "Missing the required parameter 'setting_id' when calling RegistrationApi.delete_registration_instance_configuration_setting" if setting_id.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}/instances/{instanceId}/configuration/{settingId}".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s).sub('{' + 'settingId' + '}', setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration_instance_configuration_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset a registration. 
    # This method will reset the specified registration. This is essentially the same as deleting and recreating the registration, and as such, will delete all the data associated with the registration (including launch history, etc.). If the course for which the registration is registered has multiple versions, the registration being reset will automatically be registered for the latest version. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_progress(registration_id, opts = {})
      delete_registration_progress_with_http_info(registration_id, opts)
      return nil
    end

    # Reset a registration. 
    # This method will reset the specified registration. This is essentially the same as deleting and recreating the registration, and as such, will delete all the data associated with the registration (including launch history, etc.). If the course for which the registration is registered has multiple versions, the registration being reset will automatically be registered for the latest version. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_progress_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.delete_registration_progress ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration_progress" if registration_id.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}/progress".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration_progress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete tags from a registration. 
    # Delete the provided tags for this registration. 
    # @param registration_id id for this registration
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_registration_tags(registration_id, tags, opts = {})
      delete_registration_tags_with_http_info(registration_id, tags, opts)
      return nil
    end

    # Delete tags from a registration. 
    # Delete the provided tags for this registration. 
    # @param registration_id id for this registration
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_registration_tags_with_http_info(registration_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.delete_registration_tags ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.delete_registration_tags" if registration_id.nil?
      # verify the required parameter 'tags' is set
      fail ArgumentError, "Missing the required parameter 'tags' when calling RegistrationApi.delete_registration_tags" if tags.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}/tags".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#delete_registration_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # See if a registration exists. 
    # This method is meant to check if a registration with `registrationId` exists in the system. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_registration(registration_id, opts = {})
      get_registration_with_http_info(registration_id, opts)
      return nil
    end

    # See if a registration exists. 
    # This method is meant to check if a registration with &#x60;registrationId&#x60; exists in the system. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_registration_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.get_registration ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration" if registration_id.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get registration configuration. 
    # Returns all configuration settings for this registration. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata  (default to false)
    # @return [SettingListSchema]
    def get_registration_configuration(registration_id, opts = {})
      data, _status_code, _headers = get_registration_configuration_with_http_info(registration_id, opts)
      return data
    end

    # Get registration configuration. 
    # Returns all configuration settings for this registration. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata 
    # @return [Array<(SettingListSchema, Fixnum, Hash)>] SettingListSchema data, response status code and response headers
    def get_registration_configuration_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.get_registration_configuration ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_configuration" if registration_id.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}/configuration".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeMetadata'] = opts[:'include_metadata'] if !opts[:'include_metadata'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SettingListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get configuration for instance of registration. 
    # Returns all configuration settings for this registration instance. 
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata  (default to false)
    # @return [SettingListSchema]
    def get_registration_instance_configuration(registration_id, instance_id, opts = {})
      data, _status_code, _headers = get_registration_instance_configuration_with_http_info(registration_id, instance_id, opts)
      return data
    end

    # Get configuration for instance of registration. 
    # Returns all configuration settings for this registration instance. 
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata 
    # @return [Array<(SettingListSchema, Fixnum, Hash)>] SettingListSchema data, response status code and response headers
    def get_registration_instance_configuration_with_http_info(registration_id, instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.get_registration_instance_configuration ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_instance_configuration" if registration_id.nil?
      # verify the required parameter 'instance_id' is set
      fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.get_registration_instance_configuration" if instance_id.nil?
      if instance_id < 0
        fail ArgumentError, 'invalid value for "instance_id" when calling RegistrationApi.get_registration_instance_configuration, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/registrations/{registrationId}/instances/{instanceId}/configuration".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeMetadata'] = opts[:'include_metadata'] if !opts[:'include_metadata'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SettingListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_instance_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get launch history for an instance of a registration. 
    # Returns history of the launches of the specified instance of this registration. 
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_history_log Whether to include the history log in the launch history (default to false)
    # @return [LaunchHistoryListSchema]
    def get_registration_instance_launch_history(registration_id, instance_id, opts = {})
      data, _status_code, _headers = get_registration_instance_launch_history_with_http_info(registration_id, instance_id, opts)
      return data
    end

    # Get launch history for an instance of a registration. 
    # Returns history of the launches of the specified instance of this registration. 
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_history_log Whether to include the history log in the launch history
    # @return [Array<(LaunchHistoryListSchema, Fixnum, Hash)>] LaunchHistoryListSchema data, response status code and response headers
    def get_registration_instance_launch_history_with_http_info(registration_id, instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.get_registration_instance_launch_history ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_instance_launch_history" if registration_id.nil?
      # verify the required parameter 'instance_id' is set
      fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.get_registration_instance_launch_history" if instance_id.nil?
      if instance_id < 0
        fail ArgumentError, 'invalid value for "instance_id" when calling RegistrationApi.get_registration_instance_launch_history, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/registrations/{registrationId}/instances/{instanceId}/launchHistory".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeHistoryLog'] = opts[:'include_history_log'] if !opts[:'include_history_log'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LaunchHistoryListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_instance_launch_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of an instance of a registration. 
    # Get registration progress for instance `instanceId` of `registrationId`' 
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results (default to false)
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results (default to false)
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results (default to false)
    # @return [RegistrationSchema]
    def get_registration_instance_progress(registration_id, instance_id, opts = {})
      data, _status_code, _headers = get_registration_instance_progress_with_http_info(registration_id, instance_id, opts)
      return data
    end

    # Get details of an instance of a registration. 
    # Get registration progress for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;&#39; 
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results
    # @return [Array<(RegistrationSchema, Fixnum, Hash)>] RegistrationSchema data, response status code and response headers
    def get_registration_instance_progress_with_http_info(registration_id, instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.get_registration_instance_progress ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_instance_progress" if registration_id.nil?
      # verify the required parameter 'instance_id' is set
      fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.get_registration_instance_progress" if instance_id.nil?
      if instance_id < 0
        fail ArgumentError, 'invalid value for "instance_id" when calling RegistrationApi.get_registration_instance_progress, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/registrations/{registrationId}/instances/{instanceId}".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeChildResults'] = opts[:'include_child_results'] if !opts[:'include_child_results'].nil?
      query_params[:'includeInteractionsAndObjectives'] = opts[:'include_interactions_and_objectives'] if !opts[:'include_interactions_and_objectives'].nil?
      query_params[:'includeRuntime'] = opts[:'include_runtime'] if !opts[:'include_runtime'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_instance_progress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get xAPI statements for an instance of a registration. 
    # Get xAPI statements for instance `instanceId` of `registrationId`. 
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [XapiStatementResult]
    def get_registration_instance_statements(registration_id, instance_id, opts = {})
      data, _status_code, _headers = get_registration_instance_statements_with_http_info(registration_id, instance_id, opts)
      return data
    end

    # Get xAPI statements for an instance of a registration. 
    # Get xAPI statements for instance &#x60;instanceId&#x60; of &#x60;registrationId&#x60;. 
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [Array<(XapiStatementResult, Fixnum, Hash)>] XapiStatementResult data, response status code and response headers
    def get_registration_instance_statements_with_http_info(registration_id, instance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.get_registration_instance_statements ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_instance_statements" if registration_id.nil?
      # verify the required parameter 'instance_id' is set
      fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.get_registration_instance_statements" if instance_id.nil?
      if instance_id < 0
        fail ArgumentError, 'invalid value for "instance_id" when calling RegistrationApi.get_registration_instance_statements, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = "/registrations/{registrationId}/instances/{instanceId}/xAPIStatements".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XapiStatementResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_instance_statements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all instances of a registration. 
    # Get all the instances of this the registration specified by the registration ID 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results (default to false)
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results (default to false)
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results (default to false)
    # @return [RegistrationListSchema]
    def get_registration_instances(registration_id, opts = {})
      data, _status_code, _headers = get_registration_instances_with_http_info(registration_id, opts)
      return data
    end

    # Get all instances of a registration. 
    # Get all the instances of this the registration specified by the registration ID 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results
    # @return [Array<(RegistrationListSchema, Fixnum, Hash)>] RegistrationListSchema data, response status code and response headers
    def get_registration_instances_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.get_registration_instances ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_instances" if registration_id.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}/instances".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?
      query_params[:'includeChildResults'] = opts[:'include_child_results'] if !opts[:'include_child_results'].nil?
      query_params[:'includeInteractionsAndObjectives'] = opts[:'include_interactions_and_objectives'] if !opts[:'include_interactions_and_objectives'].nil?
      query_params[:'includeRuntime'] = opts[:'include_runtime'] if !opts[:'include_runtime'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_instances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get launch history for a registration. 
    # Returns history of this registration's launches. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_history_log Whether to include the history log in the launch history (default to false)
    # @return [LaunchHistoryListSchema]
    def get_registration_launch_history(registration_id, opts = {})
      data, _status_code, _headers = get_registration_launch_history_with_http_info(registration_id, opts)
      return data
    end

    # Get launch history for a registration. 
    # Returns history of this registration&#39;s launches. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_history_log Whether to include the history log in the launch history
    # @return [Array<(LaunchHistoryListSchema, Fixnum, Hash)>] LaunchHistoryListSchema data, response status code and response headers
    def get_registration_launch_history_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.get_registration_launch_history ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_launch_history" if registration_id.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}/launchHistory".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeHistoryLog'] = opts[:'include_history_log'] if !opts[:'include_history_log'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LaunchHistoryListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_launch_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details of a registration. 
    # Get detailed information about the latest instance of `registrationId`. Additional detail may be obtained by using the optional query parameters. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results (default to false)
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results (default to false)
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results (default to false)
    # @return [RegistrationSchema]
    def get_registration_progress(registration_id, opts = {})
      data, _status_code, _headers = get_registration_progress_with_http_info(registration_id, opts)
      return data
    end

    # Get details of a registration. 
    # Get detailed information about the latest instance of &#x60;registrationId&#x60;. Additional detail may be obtained by using the optional query parameters. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results
    # @return [Array<(RegistrationSchema, Fixnum, Hash)>] RegistrationSchema data, response status code and response headers
    def get_registration_progress_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.get_registration_progress ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_progress" if registration_id.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeChildResults'] = opts[:'include_child_results'] if !opts[:'include_child_results'].nil?
      query_params[:'includeInteractionsAndObjectives'] = opts[:'include_interactions_and_objectives'] if !opts[:'include_interactions_and_objectives'].nil?
      query_params[:'includeRuntime'] = opts[:'include_runtime'] if !opts[:'include_runtime'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_progress\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get xAPI statements for a registration. 
    # Get xAPI statements for `registrationId`. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [XapiStatementResult]
    def get_registration_statements(registration_id, opts = {})
      data, _status_code, _headers = get_registration_statements_with_http_info(registration_id, opts)
      return data
    end

    # Get xAPI statements for a registration. 
    # Get xAPI statements for &#x60;registrationId&#x60;. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [Array<(XapiStatementResult, Fixnum, Hash)>] XapiStatementResult data, response status code and response headers
    def get_registration_statements_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.get_registration_statements ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_statements" if registration_id.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}/xAPIStatements".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XapiStatementResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_statements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get tags for a registration. 
    # Get a list of the tags applied to this registration. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [TagListSchema]
    def get_registration_tags(registration_id, opts = {})
      data, _status_code, _headers = get_registration_tags_with_http_info(registration_id, opts)
      return data
    end

    # Get tags for a registration. 
    # Get a list of the tags applied to this registration. 
    # @param registration_id id for this registration
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagListSchema, Fixnum, Hash)>] TagListSchema data, response status code and response headers
    def get_registration_tags_with_http_info(registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.get_registration_tags ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.get_registration_tags" if registration_id.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}/tags".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registration_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all registrations. 
    # Gets a list of registrations including a summary of the status of each registration. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only registrations for the specified course id will be included.
    # @option opts [String] :learner_id Only registrations for the specified learner id will be included.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results (default to false)
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results (default to false)
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results (default to false)
    # @option opts [Array<String>] :tags 
    # @return [RegistrationListSchema]
    def get_registrations(opts = {})
      data, _status_code, _headers = get_registrations_with_http_info(opts)
      return data
    end

    # Get a list of all registrations. 
    # Gets a list of registrations including a summary of the status of each registration. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only registrations for the specified course id will be included.
    # @option opts [String] :learner_id Only registrations for the specified learner id will be included.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [BOOLEAN] :include_child_results Include information about each learning object, not just the top level in the results
    # @option opts [BOOLEAN] :include_interactions_and_objectives Include interactions and objectives in the results
    # @option opts [BOOLEAN] :include_runtime Include runtime details in the results
    # @option opts [Array<String>] :tags 
    # @return [Array<(RegistrationListSchema, Fixnum, Hash)>] RegistrationListSchema data, response status code and response headers
    def get_registrations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.get_registrations ..."
      end
      # resource path
      local_var_path = "/registrations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'learnerId'] = opts[:'learner_id'] if !opts[:'learner_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?
      query_params[:'includeChildResults'] = opts[:'include_child_results'] if !opts[:'include_child_results'].nil?
      query_params[:'includeInteractionsAndObjectives'] = opts[:'include_interactions_and_objectives'] if !opts[:'include_interactions_and_objectives'].nil?
      query_params[:'includeRuntime'] = opts[:'include_runtime'] if !opts[:'include_runtime'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RegistrationListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#get_registrations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set tags on a registration. 
    # Set the tags for this registration. Note: any tags currently on this registration will be overwritten with the new array of tags. 
    # @param registration_id id for this registration
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_registration_tags(registration_id, tags, opts = {})
      put_registration_tags_with_http_info(registration_id, tags, opts)
      return nil
    end

    # Set tags on a registration. 
    # Set the tags for this registration. Note: any tags currently on this registration will be overwritten with the new array of tags. 
    # @param registration_id id for this registration
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_registration_tags_with_http_info(registration_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.put_registration_tags ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.put_registration_tags" if registration_id.nil?
      # verify the required parameter 'tags' is set
      fail ArgumentError, "Missing the required parameter 'tags' when calling RegistrationApi.put_registration_tags" if tags.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}/tags".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#put_registration_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set tags on registrations. 
    # Sets all of the provided tags on all of the provided registrations. 
    # @param batch Object representing an array of ids to apply an array of tags to.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_registration_tags_batch(batch, opts = {})
      put_registration_tags_batch_with_http_info(batch, opts)
      return nil
    end

    # Set tags on registrations. 
    # Sets all of the provided tags on all of the provided registrations. 
    # @param batch Object representing an array of ids to apply an array of tags to.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_registration_tags_batch_with_http_info(batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.put_registration_tags_batch ..."
      end
      # verify the required parameter 'batch' is set
      fail ArgumentError, "Missing the required parameter 'batch' when calling RegistrationApi.put_registration_tags_batch" if batch.nil?
      # resource path
      local_var_path = "/registrations/tags".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(batch)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#put_registration_tags_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set registration configuration. 
    # Set configuration settings for this registration. 
    # @param registration_id id for this registration
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_registration_configuration(registration_id, configuration_settings, opts = {})
      set_registration_configuration_with_http_info(registration_id, configuration_settings, opts)
      return nil
    end

    # Set registration configuration. 
    # Set configuration settings for this registration. 
    # @param registration_id id for this registration
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_registration_configuration_with_http_info(registration_id, configuration_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.set_registration_configuration ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.set_registration_configuration" if registration_id.nil?
      # verify the required parameter 'configuration_settings' is set
      fail ArgumentError, "Missing the required parameter 'configuration_settings' when calling RegistrationApi.set_registration_configuration" if configuration_settings.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}/configuration".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration_settings)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#set_registration_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set configuration for instance of registration. 
    # Set configuration settings for this registration instance. 
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_registration_instance_configuration(registration_id, instance_id, configuration_settings, opts = {})
      set_registration_instance_configuration_with_http_info(registration_id, instance_id, configuration_settings, opts)
      return nil
    end

    # Set configuration for instance of registration. 
    # Set configuration settings for this registration instance. 
    # @param registration_id id for this registration
    # @param instance_id The instance of this registration
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_registration_instance_configuration_with_http_info(registration_id, instance_id, configuration_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.set_registration_instance_configuration ..."
      end
      # verify the required parameter 'registration_id' is set
      fail ArgumentError, "Missing the required parameter 'registration_id' when calling RegistrationApi.set_registration_instance_configuration" if registration_id.nil?
      # verify the required parameter 'instance_id' is set
      fail ArgumentError, "Missing the required parameter 'instance_id' when calling RegistrationApi.set_registration_instance_configuration" if instance_id.nil?
      if instance_id < 0
        fail ArgumentError, 'invalid value for "instance_id" when calling RegistrationApi.set_registration_instance_configuration, must be greater than or equal to 0.'
      end

      # verify the required parameter 'configuration_settings' is set
      fail ArgumentError, "Missing the required parameter 'configuration_settings' when calling RegistrationApi.set_registration_instance_configuration" if configuration_settings.nil?
      # resource path
      local_var_path = "/registrations/{registrationId}/instances/{instanceId}/configuration".sub('{format}','json').sub('{' + 'registrationId' + '}', registration_id.to_s).sub('{' + 'instanceId' + '}', instance_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration_settings)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#set_registration_instance_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a test postback with a provided configuration. 
    # This method will allow testing a postback configuration that you provide by sending dummy data to the url specified, with the format you specify. 
    # @param post_back 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def test_registration_postback(post_back, opts = {})
      test_registration_postback_with_http_info(post_back, opts)
      return nil
    end

    # Send a test postback with a provided configuration. 
    # This method will allow testing a postback configuration that you provide by sending dummy data to the url specified, with the format you specify. 
    # @param post_back 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def test_registration_postback_with_http_info(post_back, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RegistrationApi.test_registration_postback ..."
      end
      # verify the required parameter 'post_back' is set
      fail ArgumentError, "Missing the required parameter 'post_back' when calling RegistrationApi.test_registration_postback" if post_back.nil?
      # resource path
      local_var_path = "/registrations/postBackTest".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(post_back)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RegistrationApi#test_registration_postback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
