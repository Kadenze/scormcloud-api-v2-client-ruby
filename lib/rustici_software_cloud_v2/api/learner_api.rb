=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module RusticiSoftwareCloudV2
  class LearnerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deletes all of the information associated with a learner in an application, by learner id. 
    # Deletes all of the information associated with a learner in an application, by learner id. This is meant for use with complying with GDPR requests from learners. 
    # @param learner_id The id of the learner for which to remove all data from an application
    # @param user_email The email of the user initiating this request on behalf of the learner being deleted. This must be a valid primary email address for a SCORM Cloud realm which this application is in.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_all_learner_data(learner_id, user_email, opts = {})
      delete_all_learner_data_with_http_info(learner_id, user_email, opts)
      nil
    end

    # Deletes all of the information associated with a learner in an application, by learner id. 
    # Deletes all of the information associated with a learner in an application, by learner id. This is meant for use with complying with GDPR requests from learners. 
    # @param learner_id The id of the learner for which to remove all data from an application
    # @param user_email The email of the user initiating this request on behalf of the learner being deleted. This must be a valid primary email address for a SCORM Cloud realm which this application is in.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_all_learner_data_with_http_info(learner_id, user_email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LearnerApi.delete_all_learner_data ...'
      end
      # verify the required parameter 'learner_id' is set
      if @api_client.config.client_side_validation && learner_id.nil?
        fail ArgumentError, "Missing the required parameter 'learner_id' when calling LearnerApi.delete_all_learner_data"
      end
      # verify the required parameter 'user_email' is set
      if @api_client.config.client_side_validation && user_email.nil?
        fail ArgumentError, "Missing the required parameter 'user_email' when calling LearnerApi.delete_all_learner_data"
      end
      # resource path
      local_var_path = '/learner/{learnerId}/delete-information'.sub('{' + 'learnerId' + '}', learner_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'userEmail'] = user_email

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LearnerApi#delete_all_learner_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the tags for this learner 
    # Delete the tags for this learner 
    # @param learner_id The id of the learner for which to remove all data from an application
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_learner_tags(learner_id, tags, opts = {})
      delete_learner_tags_with_http_info(learner_id, tags, opts)
      nil
    end

    # Delete the tags for this learner 
    # Delete the tags for this learner 
    # @param learner_id The id of the learner for which to remove all data from an application
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_learner_tags_with_http_info(learner_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LearnerApi.delete_learner_tags ...'
      end
      # verify the required parameter 'learner_id' is set
      if @api_client.config.client_side_validation && learner_id.nil?
        fail ArgumentError, "Missing the required parameter 'learner_id' when calling LearnerApi.delete_learner_tags"
      end
      # verify the required parameter 'tags' is set
      if @api_client.config.client_side_validation && tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling LearnerApi.delete_learner_tags"
      end
      # resource path
      local_var_path = '/learner/{learnerId}/tags'.sub('{' + 'learnerId' + '}', learner_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LearnerApi#delete_learner_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the tags for this learner 
    # Get the tags for this learner 
    # @param learner_id The id of the learner for which to remove all data from an application
    # @param [Hash] opts the optional parameters
    # @return [TagListSchema]
    def get_learner_tags(learner_id, opts = {})
      data, _status_code, _headers = get_learner_tags_with_http_info(learner_id, opts)
      data
    end

    # Get the tags for this learner 
    # Get the tags for this learner 
    # @param learner_id The id of the learner for which to remove all data from an application
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagListSchema, Fixnum, Hash)>] TagListSchema data, response status code and response headers
    def get_learner_tags_with_http_info(learner_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LearnerApi.get_learner_tags ...'
      end
      # verify the required parameter 'learner_id' is set
      if @api_client.config.client_side_validation && learner_id.nil?
        fail ArgumentError, "Missing the required parameter 'learner_id' when calling LearnerApi.get_learner_tags"
      end
      # resource path
      local_var_path = '/learner/{learnerId}/tags'.sub('{' + 'learnerId' + '}', learner_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LearnerApi#get_learner_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set the tags for this learner 
    # Set the tags for this learner 
    # @param learner_id The id of the learner for which to remove all data from an application
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_learner_tags(learner_id, tags, opts = {})
      put_learner_tags_with_http_info(learner_id, tags, opts)
      nil
    end

    # Set the tags for this learner 
    # Set the tags for this learner 
    # @param learner_id The id of the learner for which to remove all data from an application
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_learner_tags_with_http_info(learner_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LearnerApi.put_learner_tags ...'
      end
      # verify the required parameter 'learner_id' is set
      if @api_client.config.client_side_validation && learner_id.nil?
        fail ArgumentError, "Missing the required parameter 'learner_id' when calling LearnerApi.put_learner_tags"
      end
      # verify the required parameter 'tags' is set
      if @api_client.config.client_side_validation && tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling LearnerApi.put_learner_tags"
      end
      # resource path
      local_var_path = '/learner/{learnerId}/tags'.sub('{' + 'learnerId' + '}', learner_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LearnerApi#put_learner_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sets all of the provided tags on all of the provided learners
    # Sets all of the provided tags on all of the provided learners 
    # @param batch Object representing an array of ids to apply an array of tags to.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_learner_tags_batch(batch, opts = {})
      put_learner_tags_batch_with_http_info(batch, opts)
      nil
    end

    # Sets all of the provided tags on all of the provided learners
    # Sets all of the provided tags on all of the provided learners 
    # @param batch Object representing an array of ids to apply an array of tags to.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_learner_tags_batch_with_http_info(batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LearnerApi.put_learner_tags_batch ...'
      end
      # verify the required parameter 'batch' is set
      if @api_client.config.client_side_validation && batch.nil?
        fail ArgumentError, "Missing the required parameter 'batch' when calling LearnerApi.put_learner_tags_batch"
      end
      # resource path
      local_var_path = '/learner/tags'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(batch)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LearnerApi#put_learner_tags_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a learner's info on all of their registrations.
    # A learner in SCORM Cloud is not an entity on its own.  In fact, learners only exist as information on individual registrations. This method will update the information on each of the registrations that the provided `learnerId` is attached to.  You may update any of the values available in the LearnerSchema which is posted.  Any values you do not wish to alter, omit from the post.  Depending on the field, providing something like an empty string may have unintended consequences.  Lastly, it's important to note that this method is asynchronous.  A success status will be returned, and that signifies that a background process has been spun up to alter the learner's info.  As such, you may find a short period of delay in seeing the changes shown on all registrations. 
    # @param learner_id The id of the learner to be updated
    # @param learner_info 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_learner_info(learner_id, learner_info, opts = {})
      update_learner_info_with_http_info(learner_id, learner_info, opts)
      nil
    end

    # Update a learner&#39;s info on all of their registrations.
    # A learner in SCORM Cloud is not an entity on its own.  In fact, learners only exist as information on individual registrations. This method will update the information on each of the registrations that the provided &#x60;learnerId&#x60; is attached to.  You may update any of the values available in the LearnerSchema which is posted.  Any values you do not wish to alter, omit from the post.  Depending on the field, providing something like an empty string may have unintended consequences.  Lastly, it&#39;s important to note that this method is asynchronous.  A success status will be returned, and that signifies that a background process has been spun up to alter the learner&#39;s info.  As such, you may find a short period of delay in seeing the changes shown on all registrations. 
    # @param learner_id The id of the learner to be updated
    # @param learner_info 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_learner_info_with_http_info(learner_id, learner_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LearnerApi.update_learner_info ...'
      end
      # verify the required parameter 'learner_id' is set
      if @api_client.config.client_side_validation && learner_id.nil?
        fail ArgumentError, "Missing the required parameter 'learner_id' when calling LearnerApi.update_learner_info"
      end
      # verify the required parameter 'learner_info' is set
      if @api_client.config.client_side_validation && learner_info.nil?
        fail ArgumentError, "Missing the required parameter 'learner_info' when calling LearnerApi.update_learner_info"
      end
      # resource path
      local_var_path = '/learner/{learnerId}/updateInfo'.sub('{' + 'learnerId' + '}', learner_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(learner_info)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LearnerApi#update_learner_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
