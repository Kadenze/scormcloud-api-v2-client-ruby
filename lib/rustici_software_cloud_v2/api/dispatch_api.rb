=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module RusticiSoftwareCloudV2
  class DispatchApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # DestinationsByTenant
    # Create multiple destinations.
    # @param destinations_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_destinations(destinations_list, opts = {})
      create_destinations_with_http_info(destinations_list, opts)
      return nil
    end

    # DestinationsByTenant
    # Create multiple destinations.
    # @param destinations_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_destinations_with_http_info(destinations_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.create_destinations ..."
      end
      # verify the required parameter 'destinations_list' is set
      fail ArgumentError, "Missing the required parameter 'destinations_list' when calling DispatchApi.create_destinations" if destinations_list.nil?
      # resource path
      local_var_path = "/dispatch/destinations".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(destinations_list)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#create_destinations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create dispatches.
    # Create multiple dispatches at once. 
    # @param dispatch_list 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_dispatches(dispatch_list, opts = {})
      create_dispatches_with_http_info(dispatch_list, opts)
      return nil
    end

    # Create dispatches.
    # Create multiple dispatches at once. 
    # @param dispatch_list 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_dispatches_with_http_info(dispatch_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.create_dispatches ..."
      end
      # verify the required parameter 'dispatch_list' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_list' when calling DispatchApi.create_dispatches" if dispatch_list.nil?
      # resource path
      local_var_path = "/dispatch/dispatches".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dispatch_list)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#create_dispatches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete destination 
    # Delete the destination with `destinationId` 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_destination(destination_id, opts = {})
      delete_destination_with_http_info(destination_id, opts)
      return nil
    end

    # Delete destination 
    # Delete the destination with &#x60;destinationId&#x60; 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_destination_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.delete_destination ..."
      end
      # verify the required parameter 'destination_id' is set
      fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.delete_destination" if destination_id.nil?
      # resource path
      local_var_path = "/dispatch/destinations/{destinationId}".sub('{format}','json').sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#delete_destination\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete dispatches in destination 
    # Delete the dispatches in a destination 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_destination_dispatches(destination_id, opts = {})
      delete_destination_dispatches_with_http_info(destination_id, opts)
      return nil
    end

    # Delete dispatches in destination 
    # Delete the dispatches in a destination 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_destination_dispatches_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.delete_destination_dispatches ..."
      end
      # verify the required parameter 'destination_id' is set
      fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.delete_destination_dispatches" if destination_id.nil?
      # resource path
      local_var_path = "/dispatch/destinations/{destinationId}/dispatches".sub('{format}','json').sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#delete_destination_dispatches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the tags for this destination 
    # Delete the tags for this destination 
    # @param destination_id Identifier for the destination
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_destination_tags(destination_id, tags, opts = {})
      delete_destination_tags_with_http_info(destination_id, tags, opts)
      return nil
    end

    # Delete the tags for this destination 
    # Delete the tags for this destination 
    # @param destination_id Identifier for the destination
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_destination_tags_with_http_info(destination_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.delete_destination_tags ..."
      end
      # verify the required parameter 'destination_id' is set
      fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.delete_destination_tags" if destination_id.nil?
      # verify the required parameter 'tags' is set
      fail ArgumentError, "Missing the required parameter 'tags' when calling DispatchApi.delete_destination_tags" if tags.nil?
      # resource path
      local_var_path = "/dispatch/destinations/{destinationId}/tags".sub('{format}','json').sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#delete_destination_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the dispatch with `dispatchId`. 
    # Delete the dispatch with `dispatchId`. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dispatch(dispatch_id, opts = {})
      delete_dispatch_with_http_info(dispatch_id, opts)
      return nil
    end

    # Delete the dispatch with &#x60;dispatchId&#x60;. 
    # Delete the dispatch with &#x60;dispatchId&#x60;. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dispatch_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.delete_dispatch ..."
      end
      # verify the required parameter 'dispatch_id' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.delete_dispatch" if dispatch_id.nil?
      # resource path
      local_var_path = "/dispatch/dispatches/{dispatchId}".sub('{format}','json').sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#delete_dispatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # DispatchesByTenantAndDispatchId
    # Delete the postback info dispatch with 'dispatchId'. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dispatch_postback_info(dispatch_id, opts = {})
      delete_dispatch_postback_info_with_http_info(dispatch_id, opts)
      return nil
    end

    # DispatchesByTenantAndDispatchId
    # Delete the postback info dispatch with &#39;dispatchId&#39;. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dispatch_postback_info_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.delete_dispatch_postback_info ..."
      end
      # verify the required parameter 'dispatch_id' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.delete_dispatch_postback_info" if dispatch_id.nil?
      # resource path
      local_var_path = "/dispatch/dispatches/{dispatchId}/postback".sub('{format}','json').sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#delete_dispatch_postback_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the tags for this dispatch. 
    # Delete the tags for this dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_dispatch_tags(dispatch_id, tags, opts = {})
      delete_dispatch_tags_with_http_info(dispatch_id, tags, opts)
      return nil
    end

    # Delete the tags for this dispatch. 
    # Delete the tags for this dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_dispatch_tags_with_http_info(dispatch_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.delete_dispatch_tags ..."
      end
      # verify the required parameter 'dispatch_id' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.delete_dispatch_tags" if dispatch_id.nil?
      # verify the required parameter 'tags' is set
      fail ArgumentError, "Missing the required parameter 'tags' when calling DispatchApi.delete_dispatch_tags" if tags.nil?
      # resource path
      local_var_path = "/dispatch/dispatches/{dispatchId}/tags".sub('{format}','json').sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#delete_dispatch_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # DestinationsDispatchesRegistrationInstancing
    # Enable or disable registration instancing.
    # @param destination_id Identifier for the destination
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def enable_registration_instancing(destination_id, enabled, opts = {})
      enable_registration_instancing_with_http_info(destination_id, enabled, opts)
      return nil
    end

    # DestinationsDispatchesRegistrationInstancing
    # Enable or disable registration instancing.
    # @param destination_id Identifier for the destination
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def enable_registration_instancing_with_http_info(destination_id, enabled, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.enable_registration_instancing ..."
      end
      # verify the required parameter 'destination_id' is set
      fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.enable_registration_instancing" if destination_id.nil?
      # verify the required parameter 'enabled' is set
      fail ArgumentError, "Missing the required parameter 'enabled' when calling DispatchApi.enable_registration_instancing" if enabled.nil?
      # resource path
      local_var_path = "/dispatch/destinations/{destinationId}/dispatches/registrationInstancing".sub('{format}','json').sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enabled)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#enable_registration_instancing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get destination information by destinationId.
    # Gets detailed information about a destination belonging to a destinationId.
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [DestinationSchema]
    def get_destination(destination_id, opts = {})
      data, _status_code, _headers = get_destination_with_http_info(destination_id, opts)
      return data
    end

    # Get destination information by destinationId.
    # Gets detailed information about a destination belonging to a destinationId.
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [Array<(DestinationSchema, Fixnum, Hash)>] DestinationSchema data, response status code and response headers
    def get_destination_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.get_destination ..."
      end
      # verify the required parameter 'destination_id' is set
      fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.get_destination" if destination_id.nil?
      # resource path
      local_var_path = "/dispatch/destinations/{destinationId}".sub('{format}','json').sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DestinationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_destination\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # DestinationsDispatchesRegistrationCount
    # Get an aggregate count of all related dispatch registrations.
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [IntegerResultSchema]
    def get_destination_dispatch_registration_count(destination_id, opts = {})
      data, _status_code, _headers = get_destination_dispatch_registration_count_with_http_info(destination_id, opts)
      return data
    end

    # DestinationsDispatchesRegistrationCount
    # Get an aggregate count of all related dispatch registrations.
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [Array<(IntegerResultSchema, Fixnum, Hash)>] IntegerResultSchema data, response status code and response headers
    def get_destination_dispatch_registration_count_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.get_destination_dispatch_registration_count ..."
      end
      # verify the required parameter 'destination_id' is set
      fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.get_destination_dispatch_registration_count" if destination_id.nil?
      # resource path
      local_var_path = "/dispatch/destinations/{destinationId}/dispatches/registrationCount".sub('{format}','json').sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IntegerResultSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_destination_dispatch_registration_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a ZIP of related dispatches.
    # Returns a zip file containing all of the dispatch packages for a destination.
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of dispatch package to export (SCORM12 only supported in cloud today) (default to SCORM12)
    # @option opts [String] :css_url 
    # @option opts [Array<String>] :tags 
    # @return [File]
    def get_destination_dispatch_zip(destination_id, opts = {})
      data, _status_code, _headers = get_destination_dispatch_zip_with_http_info(destination_id, opts)
      return data
    end

    # Get a ZIP of related dispatches.
    # Returns a zip file containing all of the dispatch packages for a destination.
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of dispatch package to export (SCORM12 only supported in cloud today)
    # @option opts [String] :css_url 
    # @option opts [Array<String>] :tags 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def get_destination_dispatch_zip_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.get_destination_dispatch_zip ..."
      end
      # verify the required parameter 'destination_id' is set
      fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.get_destination_dispatch_zip" if destination_id.nil?
      if opts[:'type'] && !['SCORM12'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of SCORM12'
      end
      # resource path
      local_var_path = "/dispatch/destinations/{destinationId}/dispatches/zip".sub('{format}','json').sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'cssUrl'] = opts[:'css_url'] if !opts[:'css_url'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_destination_dispatch_zip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of dispatches in this destination
    # Get a list of related dispatches.
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retreive resources having &#x60;courseId&#x60; 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [Array<String>] :tags 
    # @option opts [String] :datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (default to updated)
    # @option opts [String] :order_by 
    # @return [DispatchListSchema]
    def get_destination_dispatches(destination_id, opts = {})
      data, _status_code, _headers = get_destination_dispatches_with_http_info(destination_id, opts)
      return data
    end

    # Get a list of dispatches in this destination
    # Get a list of related dispatches.
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retreive resources having &#x60;courseId&#x60; 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [Array<String>] :tags 
    # @option opts [String] :datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;.
    # @option opts [String] :order_by 
    # @return [Array<(DispatchListSchema, Fixnum, Hash)>] DispatchListSchema data, response status code and response headers
    def get_destination_dispatches_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.get_destination_dispatches ..."
      end
      # verify the required parameter 'destination_id' is set
      fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.get_destination_dispatches" if destination_id.nil?
      if opts[:'datetime_filter'] && !['created', 'updated'].include?(opts[:'datetime_filter'])
        fail ArgumentError, 'invalid value for "datetime_filter", must be one of created, updated'
      end
      if opts[:'order_by'] && !['updated_asc', 'updated_desc', 'created_asc', 'created_desc'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of updated_asc, updated_desc, created_asc, created_desc'
      end
      # resource path
      local_var_path = "/dispatch/destinations/{destinationId}/dispatches".sub('{format}','json').sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DispatchListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_destination_dispatches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # True if the destination is set to hash user info, or false if it is disabled.
    # True if the destination is set to hash user info, or false if it is disabled.
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [EnabledSchema]
    def get_destination_hash_user_info(destination_id, opts = {})
      data, _status_code, _headers = get_destination_hash_user_info_with_http_info(destination_id, opts)
      return data
    end

    # True if the destination is set to hash user info, or false if it is disabled.
    # True if the destination is set to hash user info, or false if it is disabled.
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnabledSchema, Fixnum, Hash)>] EnabledSchema data, response status code and response headers
    def get_destination_hash_user_info_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.get_destination_hash_user_info ..."
      end
      # verify the required parameter 'destination_id' is set
      fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.get_destination_hash_user_info" if destination_id.nil?
      # resource path
      local_var_path = "/dispatch/destinations/{destinationId}/dispatches/hashUserInfo".sub('{format}','json').sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnabledSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_destination_hash_user_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the tags for this destination 
    # Get the tags for this destination 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [TagListSchema]
    def get_destination_tags(destination_id, opts = {})
      data, _status_code, _headers = get_destination_tags_with_http_info(destination_id, opts)
      return data
    end

    # Get the tags for this destination 
    # Get the tags for this destination 
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagListSchema, Fixnum, Hash)>] TagListSchema data, response status code and response headers
    def get_destination_tags_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.get_destination_tags ..."
      end
      # verify the required parameter 'destination_id' is set
      fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.get_destination_tags" if destination_id.nil?
      # resource path
      local_var_path = "/dispatch/destinations/{destinationId}/tags".sub('{format}','json').sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_destination_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # getAllDestinations
    # Get a list of destinations.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retreive resources having &#x60;courseId&#x60; 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [Array<String>] :tags 
    # @option opts [String] :datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (default to updated)
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to updated_asc (default to updated_asc)
    # @return [DestinationListSchema]
    def get_destinations(opts = {})
      data, _status_code, _headers = get_destinations_with_http_info(opts)
      return data
    end

    # getAllDestinations
    # Get a list of destinations.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retreive resources having &#x60;courseId&#x60; 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [Array<String>] :tags 
    # @option opts [String] :datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;.
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to updated_asc
    # @return [Array<(DestinationListSchema, Fixnum, Hash)>] DestinationListSchema data, response status code and response headers
    def get_destinations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.get_destinations ..."
      end
      if opts[:'datetime_filter'] && !['created', 'updated'].include?(opts[:'datetime_filter'])
        fail ArgumentError, 'invalid value for "datetime_filter", must be one of created, updated'
      end
      if opts[:'order_by'] && !['updated_asc', 'updated_desc', 'created_asc', 'created_desc'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of updated_asc, updated_desc, created_asc, created_desc'
      end
      # resource path
      local_var_path = "/dispatch/destinations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DestinationListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_destinations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get dispatch by id.
    # Get the dispatch with `dispatchId`. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [DispatchSchema]
    def get_dispatch(dispatch_id, opts = {})
      data, _status_code, _headers = get_dispatch_with_http_info(dispatch_id, opts)
      return data
    end

    # Get dispatch by id.
    # Get the dispatch with &#x60;dispatchId&#x60;. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(DispatchSchema, Fixnum, Hash)>] DispatchSchema data, response status code and response headers
    def get_dispatch_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.get_dispatch ..."
      end
      # verify the required parameter 'dispatch_id' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.get_dispatch" if dispatch_id.nil?
      # resource path
      local_var_path = "/dispatch/dispatches/{dispatchId}".sub('{format}','json').sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DispatchSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_dispatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the `enabled` status for `dispatchId`. 
    # Get the `enabled` status for `dispatchId`.  True if the dispatch is enabled, or false if it is disabled. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [EnabledSchema]
    def get_dispatch_enabled(dispatch_id, opts = {})
      data, _status_code, _headers = get_dispatch_enabled_with_http_info(dispatch_id, opts)
      return data
    end

    # Get the &#x60;enabled&#x60; status for &#x60;dispatchId&#x60;. 
    # Get the &#x60;enabled&#x60; status for &#x60;dispatchId&#x60;.  True if the dispatch is enabled, or false if it is disabled. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnabledSchema, Fixnum, Hash)>] EnabledSchema data, response status code and response headers
    def get_dispatch_enabled_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.get_dispatch_enabled ..."
      end
      # verify the required parameter 'dispatch_id' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.get_dispatch_enabled" if dispatch_id.nil?
      # resource path
      local_var_path = "/dispatch/dispatches/{dispatchId}/enabled".sub('{format}','json').sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnabledSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_dispatch_enabled\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get if this dispatch has PII hashing enabled.
    # Get if this dispatch has PII hashing enabled. True if the dispatch is set to hash user info, or false if it is disabled. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [EnabledSchema]
    def get_dispatch_hash_user_info(dispatch_id, opts = {})
      data, _status_code, _headers = get_dispatch_hash_user_info_with_http_info(dispatch_id, opts)
      return data
    end

    # Get if this dispatch has PII hashing enabled.
    # Get if this dispatch has PII hashing enabled. True if the dispatch is set to hash user info, or false if it is disabled. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnabledSchema, Fixnum, Hash)>] EnabledSchema data, response status code and response headers
    def get_dispatch_hash_user_info_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.get_dispatch_hash_user_info ..."
      end
      # verify the required parameter 'dispatch_id' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.get_dispatch_hash_user_info" if dispatch_id.nil?
      # resource path
      local_var_path = "/dispatch/dispatches/{dispatchId}/hashUserInfo".sub('{format}','json').sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EnabledSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_dispatch_hash_user_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the registration count for `dispatchId`. 
    # Get the registration count for this dispatch, and the date and time of the last count reset, if any. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [DispatchRegistrationCountSchema]
    def get_dispatch_registration_count(dispatch_id, opts = {})
      data, _status_code, _headers = get_dispatch_registration_count_with_http_info(dispatch_id, opts)
      return data
    end

    # Get the registration count for &#x60;dispatchId&#x60;. 
    # Get the registration count for this dispatch, and the date and time of the last count reset, if any. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(DispatchRegistrationCountSchema, Fixnum, Hash)>] DispatchRegistrationCountSchema data, response status code and response headers
    def get_dispatch_registration_count_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.get_dispatch_registration_count ..."
      end
      # verify the required parameter 'dispatch_id' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.get_dispatch_registration_count" if dispatch_id.nil?
      # resource path
      local_var_path = "/dispatch/dispatches/{dispatchId}/registrationCount".sub('{format}','json').sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DispatchRegistrationCountSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_dispatch_registration_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the tags for this dispatch. 
    # Get the tags for this dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [TagListSchema]
    def get_dispatch_tags(dispatch_id, opts = {})
      data, _status_code, _headers = get_dispatch_tags_with_http_info(dispatch_id, opts)
      return data
    end

    # Get the tags for this dispatch. 
    # Get the tags for this dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagListSchema, Fixnum, Hash)>] TagListSchema data, response status code and response headers
    def get_dispatch_tags_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.get_dispatch_tags ..."
      end
      # verify the required parameter 'dispatch_id' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.get_dispatch_tags" if dispatch_id.nil?
      # resource path
      local_var_path = "/dispatch/dispatches/{dispatchId}/tags".sub('{format}','json').sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_dispatch_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the ZIP for the dispatchId.
    # Get the ZIP for the dispatch with `dispatchId` 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of dispatch package to export (SCORM12 only supported in cloud today) (default to SCORM12)
    # @option opts [String] :css_url 
    # @return [File]
    def get_dispatch_zip(dispatch_id, opts = {})
      data, _status_code, _headers = get_dispatch_zip_with_http_info(dispatch_id, opts)
      return data
    end

    # Get the ZIP for the dispatchId.
    # Get the ZIP for the dispatch with &#x60;dispatchId&#x60; 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type The type of dispatch package to export (SCORM12 only supported in cloud today)
    # @option opts [String] :css_url 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def get_dispatch_zip_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.get_dispatch_zip ..."
      end
      # verify the required parameter 'dispatch_id' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.get_dispatch_zip" if dispatch_id.nil?
      if opts[:'type'] && !['SCORM12'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of SCORM12'
      end
      # resource path
      local_var_path = "/dispatch/dispatches/{dispatchId}/zip".sub('{format}','json').sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'cssUrl'] = opts[:'css_url'] if !opts[:'css_url'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_dispatch_zip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # All Dispatches in the system for an AppId
    # Get a list of dispatches.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retreive resources having &#x60;courseId&#x60; 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [Array<String>] :tags 
    # @option opts [String] :datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (default to updated)
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to updated_asc (default to updated_asc)
    # @return [DispatchListSchema]
    def get_dispatches(opts = {})
      data, _status_code, _headers = get_dispatches_with_http_info(opts)
      return data
    end

    # All Dispatches in the system for an AppId
    # Get a list of dispatches.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Only retreive resources having &#x60;courseId&#x60; 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [Array<String>] :tags 
    # @option opts [String] :datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;.
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to updated_asc
    # @return [Array<(DispatchListSchema, Fixnum, Hash)>] DispatchListSchema data, response status code and response headers
    def get_dispatches_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.get_dispatches ..."
      end
      if opts[:'datetime_filter'] && !['created', 'updated'].include?(opts[:'datetime_filter'])
        fail ArgumentError, 'invalid value for "datetime_filter", must be one of created, updated'
      end
      if opts[:'order_by'] && !['updated_asc', 'updated_desc', 'created_asc', 'created_desc'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of updated_asc, updated_desc, created_asc, created_desc'
      end
      # resource path
      local_var_path = "/dispatch/dispatches".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DispatchListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#get_dispatches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the tags for this destination 
    # Set the tags for this destination 
    # @param destination_id Identifier for the destination
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_destination_tags(destination_id, tags, opts = {})
      put_destination_tags_with_http_info(destination_id, tags, opts)
      return nil
    end

    # Set the tags for this destination 
    # Set the tags for this destination 
    # @param destination_id Identifier for the destination
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_destination_tags_with_http_info(destination_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.put_destination_tags ..."
      end
      # verify the required parameter 'destination_id' is set
      fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.put_destination_tags" if destination_id.nil?
      # verify the required parameter 'tags' is set
      fail ArgumentError, "Missing the required parameter 'tags' when calling DispatchApi.put_destination_tags" if tags.nil?
      # resource path
      local_var_path = "/dispatch/destinations/{destinationId}/tags".sub('{format}','json').sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#put_destination_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets all of the provided tags on all of the provided destinations
    # Sets all of the provided tags on all of the provided destinations
    # @param batch Object representing an array of ids to apply an array of tags to.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_destination_tags_batch(batch, opts = {})
      put_destination_tags_batch_with_http_info(batch, opts)
      return nil
    end

    # Sets all of the provided tags on all of the provided destinations
    # Sets all of the provided tags on all of the provided destinations
    # @param batch Object representing an array of ids to apply an array of tags to.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_destination_tags_batch_with_http_info(batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.put_destination_tags_batch ..."
      end
      # verify the required parameter 'batch' is set
      fail ArgumentError, "Missing the required parameter 'batch' when calling DispatchApi.put_destination_tags_batch" if batch.nil?
      # resource path
      local_var_path = "/dispatch/destinations/tags".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(batch)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#put_destination_tags_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the tags for this dispatch. 
    # Set the tags for this dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_dispatch_tags(dispatch_id, tags, opts = {})
      put_dispatch_tags_with_http_info(dispatch_id, tags, opts)
      return nil
    end

    # Set the tags for this dispatch. 
    # Set the tags for this dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_dispatch_tags_with_http_info(dispatch_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.put_dispatch_tags ..."
      end
      # verify the required parameter 'dispatch_id' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.put_dispatch_tags" if dispatch_id.nil?
      # verify the required parameter 'tags' is set
      fail ArgumentError, "Missing the required parameter 'tags' when calling DispatchApi.put_dispatch_tags" if tags.nil?
      # resource path
      local_var_path = "/dispatch/dispatches/{dispatchId}/tags".sub('{format}','json').sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#put_dispatch_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets all of the provided tags on all of the provided dispatches 
    # Sets all of the provided tags on all of the provided dispatches 
    # @param batch Object representing an array of ids to apply an array of tags to.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_dispatch_tags_batch(batch, opts = {})
      put_dispatch_tags_batch_with_http_info(batch, opts)
      return nil
    end

    # Sets all of the provided tags on all of the provided dispatches 
    # Sets all of the provided tags on all of the provided dispatches 
    # @param batch Object representing an array of ids to apply an array of tags to.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_dispatch_tags_batch_with_http_info(batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.put_dispatch_tags_batch ..."
      end
      # verify the required parameter 'batch' is set
      fail ArgumentError, "Missing the required parameter 'batch' when calling DispatchApi.put_dispatch_tags_batch" if batch.nil?
      # resource path
      local_var_path = "/dispatch/dispatches/tags".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(batch)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#put_dispatch_tags_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # DestinationsDispatchesRegistrationCount
    # Reset registration counts for all related dispatches.
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_destination_dispatch_registration_count(destination_id, opts = {})
      reset_destination_dispatch_registration_count_with_http_info(destination_id, opts)
      return nil
    end

    # DestinationsDispatchesRegistrationCount
    # Reset registration counts for all related dispatches.
    # @param destination_id Identifier for the destination
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_destination_dispatch_registration_count_with_http_info(destination_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.reset_destination_dispatch_registration_count ..."
      end
      # verify the required parameter 'destination_id' is set
      fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.reset_destination_dispatch_registration_count" if destination_id.nil?
      # resource path
      local_var_path = "/dispatch/destinations/{destinationId}/dispatches/registrationCount".sub('{format}','json').sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#reset_destination_dispatch_registration_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset registration count. 
    # Reset the registration count for this dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_dispatch_registration_count(dispatch_id, opts = {})
      reset_dispatch_registration_count_with_http_info(dispatch_id, opts)
      return nil
    end

    # Reset registration count. 
    # Reset the registration count for this dispatch. 
    # @param dispatch_id Identifier for the dispatch
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_dispatch_registration_count_with_http_info(dispatch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.reset_dispatch_registration_count ..."
      end
      # verify the required parameter 'dispatch_id' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.reset_dispatch_registration_count" if dispatch_id.nil?
      # resource path
      local_var_path = "/dispatch/dispatches/{dispatchId}/registrationCount".sub('{format}','json').sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#reset_dispatch_registration_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates or updates the destination identified by the `destinationId` provided in the path. If the destination is being created, a name should be provided in the DestinationSchema, else an error will be thrown.  You may also optionally supply the e-mail address of the user to be associated with this destination.  This e-mail address should correspond to a SCORM Cloud user account. If you do not supply an e-mail address upon the creation of a destination, the owner of the Realm will be used.  This can, of course, also be changed via calling this method to update an existing destination. 
    # @param destination_id Identifier for the destination
    # @param destination 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_destination(destination_id, destination, opts = {})
      set_destination_with_http_info(destination_id, destination, opts)
      return nil
    end

    # 
    # Creates or updates the destination identified by the &#x60;destinationId&#x60; provided in the path. If the destination is being created, a name should be provided in the DestinationSchema, else an error will be thrown.  You may also optionally supply the e-mail address of the user to be associated with this destination.  This e-mail address should correspond to a SCORM Cloud user account. If you do not supply an e-mail address upon the creation of a destination, the owner of the Realm will be used.  This can, of course, also be changed via calling this method to update an existing destination. 
    # @param destination_id Identifier for the destination
    # @param destination 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_destination_with_http_info(destination_id, destination, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.set_destination ..."
      end
      # verify the required parameter 'destination_id' is set
      fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.set_destination" if destination_id.nil?
      # verify the required parameter 'destination' is set
      fail ArgumentError, "Missing the required parameter 'destination' when calling DispatchApi.set_destination" if destination.nil?
      # resource path
      local_var_path = "/dispatch/destinations/{destinationId}".sub('{format}','json').sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(destination)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#set_destination\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # DestinationsDispatchesEnabledByTenant
    # Enable or disable all related dispatches.
    # @param destination_id Identifier for the destination
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_destination_dispatch_enabled(destination_id, enabled, opts = {})
      set_destination_dispatch_enabled_with_http_info(destination_id, enabled, opts)
      return nil
    end

    # DestinationsDispatchesEnabledByTenant
    # Enable or disable all related dispatches.
    # @param destination_id Identifier for the destination
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_destination_dispatch_enabled_with_http_info(destination_id, enabled, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.set_destination_dispatch_enabled ..."
      end
      # verify the required parameter 'destination_id' is set
      fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.set_destination_dispatch_enabled" if destination_id.nil?
      # verify the required parameter 'enabled' is set
      fail ArgumentError, "Missing the required parameter 'enabled' when calling DispatchApi.set_destination_dispatch_enabled" if enabled.nil?
      # resource path
      local_var_path = "/dispatch/destinations/{destinationId}/dispatches/enabled".sub('{format}','json').sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enabled)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#set_destination_dispatch_enabled\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the `enabled` status for `dispatchId`. 
    # Set the `enabled` status for `dispatchId`. 
    # @param dispatch_id Identifier for the dispatch
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_dispatch_enabled(dispatch_id, enabled, opts = {})
      set_dispatch_enabled_with_http_info(dispatch_id, enabled, opts)
      return nil
    end

    # Set the &#x60;enabled&#x60; status for &#x60;dispatchId&#x60;. 
    # Set the &#x60;enabled&#x60; status for &#x60;dispatchId&#x60;. 
    # @param dispatch_id Identifier for the dispatch
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_dispatch_enabled_with_http_info(dispatch_id, enabled, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.set_dispatch_enabled ..."
      end
      # verify the required parameter 'dispatch_id' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.set_dispatch_enabled" if dispatch_id.nil?
      # verify the required parameter 'enabled' is set
      fail ArgumentError, "Missing the required parameter 'enabled' when calling DispatchApi.set_dispatch_enabled" if enabled.nil?
      # resource path
      local_var_path = "/dispatch/dispatches/{dispatchId}/enabled".sub('{format}','json').sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enabled)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#set_dispatch_enabled\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable or disable hashing of the user info for the destination.
    # Enable or disable hashing of the user info for the destination.
    # @param destination_id Identifier for the destination
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_destination_hash_user_info(destination_id, enabled, opts = {})
      update_destination_hash_user_info_with_http_info(destination_id, enabled, opts)
      return nil
    end

    # Enable or disable hashing of the user info for the destination.
    # Enable or disable hashing of the user info for the destination.
    # @param destination_id Identifier for the destination
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_destination_hash_user_info_with_http_info(destination_id, enabled, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.update_destination_hash_user_info ..."
      end
      # verify the required parameter 'destination_id' is set
      fail ArgumentError, "Missing the required parameter 'destination_id' when calling DispatchApi.update_destination_hash_user_info" if destination_id.nil?
      # verify the required parameter 'enabled' is set
      fail ArgumentError, "Missing the required parameter 'enabled' when calling DispatchApi.update_destination_hash_user_info" if enabled.nil?
      # resource path
      local_var_path = "/dispatch/destinations/{destinationId}/dispatches/hashUserInfo".sub('{format}','json').sub('{' + 'destinationId' + '}', destination_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enabled)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#update_destination_hash_user_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the dispatch with `dispatchId`. 
    # Update the dispatch with `dispatchId`. 
    # @param dispatch_id Identifier for the dispatch
    # @param dispatch_properties 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_dispatch(dispatch_id, dispatch_properties, opts = {})
      update_dispatch_with_http_info(dispatch_id, dispatch_properties, opts)
      return nil
    end

    # Update the dispatch with &#x60;dispatchId&#x60;. 
    # Update the dispatch with &#x60;dispatchId&#x60;. 
    # @param dispatch_id Identifier for the dispatch
    # @param dispatch_properties 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_dispatch_with_http_info(dispatch_id, dispatch_properties, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.update_dispatch ..."
      end
      # verify the required parameter 'dispatch_id' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.update_dispatch" if dispatch_id.nil?
      # verify the required parameter 'dispatch_properties' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_properties' when calling DispatchApi.update_dispatch" if dispatch_properties.nil?
      # resource path
      local_var_path = "/dispatch/dispatches/{dispatchId}".sub('{format}','json').sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(dispatch_properties)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#update_dispatch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enable or disable hashing of the user info for the dispatch.
    # Enable or disable hashing of the user info for the dispatch.
    # @param dispatch_id Identifier for the dispatch
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_dispatch_hash_user_info(dispatch_id, enabled, opts = {})
      update_dispatch_hash_user_info_with_http_info(dispatch_id, enabled, opts)
      return nil
    end

    # Enable or disable hashing of the user info for the dispatch.
    # Enable or disable hashing of the user info for the dispatch.
    # @param dispatch_id Identifier for the dispatch
    # @param enabled 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_dispatch_hash_user_info_with_http_info(dispatch_id, enabled, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DispatchApi.update_dispatch_hash_user_info ..."
      end
      # verify the required parameter 'dispatch_id' is set
      fail ArgumentError, "Missing the required parameter 'dispatch_id' when calling DispatchApi.update_dispatch_hash_user_info" if dispatch_id.nil?
      # verify the required parameter 'enabled' is set
      fail ArgumentError, "Missing the required parameter 'enabled' when calling DispatchApi.update_dispatch_hash_user_info" if enabled.nil?
      # resource path
      local_var_path = "/dispatch/dispatches/{dispatchId}/hashUserInfo".sub('{format}','json').sub('{' + 'dispatchId' + '}', dispatch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(enabled)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DispatchApi#update_dispatch_hash_user_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
