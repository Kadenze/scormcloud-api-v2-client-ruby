=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module RusticiSoftwareCloudV2
  class AuthenticationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Authenticates for a oauth token
    # Creates, signs and returns an OAuth2 token based on the provided permissions, if the credentials used to request the token have the permissions being requested.  >Note:  >The token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires. 
    # @param scope 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :expiration  (default to 300)
    # @return [ApplicationToken]
    def get_app_token(scope, opts = {})
      data, _status_code, _headers = get_app_token_with_http_info(scope, opts)
      return data
    end

    # Authenticates for a oauth token
    # Creates, signs and returns an OAuth2 token based on the provided permissions, if the credentials used to request the token have the permissions being requested.  &gt;Note:  &gt;The token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires. 
    # @param scope 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :expiration 
    # @return [Array<(ApplicationToken, Fixnum, Hash)>] ApplicationToken data, response status code and response headers
    def get_app_token_with_http_info(scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AuthenticationApi.get_app_token ..."
      end
      # verify the required parameter 'scope' is set
      fail ArgumentError, "Missing the required parameter 'scope' when calling AuthenticationApi.get_app_token" if scope.nil?
      if !opts[:'expiration'].nil? && opts[:'expiration'] > 43200
        fail ArgumentError, 'invalid value for "opts[:"expiration"]" when calling AuthenticationApi.get_app_token, must be smaller than or equal to 43200.'
      end

      if !opts[:'expiration'].nil? && opts[:'expiration'] < 60
        fail ArgumentError, 'invalid value for "opts[:"expiration"]" when calling AuthenticationApi.get_app_token, must be greater than or equal to 60.'
      end

      # resource path
      local_var_path = "/oauth/authenticate/application/token".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["scope"] = scope
      form_params["expiration"] = opts[:'expiration'] if !opts[:'expiration'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationToken')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AuthenticationApi#get_app_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
