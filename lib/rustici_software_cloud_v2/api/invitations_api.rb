=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module RusticiSoftwareCloudV2
  class InvitationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a private invitation to a course.
    # Create a private invitation to a course.  The provided information will be used to create new registrations for all of the provided e-mail addresses, and send asynchronously send e-mails to those addresses inviting them to the course.  To check the status of this process, a subsequent call to `/invitations/private/{invitationId}/status` must be made.
    # @param private_invitation_request 
    # @param [Hash] opts the optional parameters
    # @return [InvitationSummarySchema]
    def create_private_invitation(private_invitation_request, opts = {})
      data, _status_code, _headers = create_private_invitation_with_http_info(private_invitation_request, opts)
      data
    end

    # Create a private invitation to a course.
    # Create a private invitation to a course.  The provided information will be used to create new registrations for all of the provided e-mail addresses, and send asynchronously send e-mails to those addresses inviting them to the course.  To check the status of this process, a subsequent call to &#x60;/invitations/private/{invitationId}/status&#x60; must be made.
    # @param private_invitation_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvitationSummarySchema, Fixnum, Hash)>] InvitationSummarySchema data, response status code and response headers
    def create_private_invitation_with_http_info(private_invitation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.create_private_invitation ...'
      end
      # verify the required parameter 'private_invitation_request' is set
      if @api_client.config.client_side_validation && private_invitation_request.nil?
        fail ArgumentError, "Missing the required parameter 'private_invitation_request' when calling InvitationsApi.create_private_invitation"
      end
      # resource path
      local_var_path = '/invitations/private'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(private_invitation_request)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvitationSummarySchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#create_private_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a publicly accessible invitation to a course.
    # Create a publicly accessible invitation to a course.
    # @param public_invitation_request A description of the public invitation to be created.
    # @param [Hash] opts the optional parameters
    # @return [PublicInvitationSchema]
    def create_public_invitation(public_invitation_request, opts = {})
      data, _status_code, _headers = create_public_invitation_with_http_info(public_invitation_request, opts)
      data
    end

    # Create a publicly accessible invitation to a course.
    # Create a publicly accessible invitation to a course.
    # @param public_invitation_request A description of the public invitation to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicInvitationSchema, Fixnum, Hash)>] PublicInvitationSchema data, response status code and response headers
    def create_public_invitation_with_http_info(public_invitation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.create_public_invitation ...'
      end
      # verify the required parameter 'public_invitation_request' is set
      if @api_client.config.client_side_validation && public_invitation_request.nil?
        fail ArgumentError, "Missing the required parameter 'public_invitation_request' when calling InvitationsApi.create_public_invitation"
      end
      # resource path
      local_var_path = '/invitations/public'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(public_invitation_request)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicInvitationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#create_public_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the tags for this invitation 
    # Delete the tags for this invitation 
    # @param invitation_id invitation id
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_invitation_tags(invitation_id, tags, opts = {})
      delete_invitation_tags_with_http_info(invitation_id, tags, opts)
      nil
    end

    # Delete the tags for this invitation 
    # Delete the tags for this invitation 
    # @param invitation_id invitation id
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_invitation_tags_with_http_info(invitation_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.delete_invitation_tags ...'
      end
      # verify the required parameter 'invitation_id' is set
      if @api_client.config.client_side_validation && invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.delete_invitation_tags"
      end
      # verify the required parameter 'tags' is set
      if @api_client.config.client_side_validation && tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling InvitationsApi.delete_invitation_tags"
      end
      # resource path
      local_var_path = '/invitations/{invitationId}/tags'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#delete_invitation_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of invitation summaries.
    # Get a summary of all the invitations for an appId, both public and private.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Limit the results to invitations with courseIds that match the filter.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (default to updated)
    # @option opts [Array<String>] :tags 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [InvitationSummaryList]
    def get_all_invitations(opts = {})
      data, _status_code, _headers = get_all_invitations_with_http_info(opts)
      data
    end

    # Get a list of invitation summaries.
    # Get a summary of all the invitations for an appId, both public and private.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Limit the results to invitations with courseIds that match the filter.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;.
    # @option opts [Array<String>] :tags 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [Array<(InvitationSummaryList, Fixnum, Hash)>] InvitationSummaryList data, response status code and response headers
    def get_all_invitations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_all_invitations ...'
      end
      if @api_client.config.client_side_validation && opts[:'datetime_filter'] && !['created', 'updated'].include?(opts[:'datetime_filter'])
        fail ArgumentError, 'invalid value for "datetime_filter", must be one of created, updated'
      end
      # resource path
      local_var_path = '/invitations'

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvitationSummaryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_all_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the tags for this invitation 
    # Get the tags for this invitation 
    # @param invitation_id invitation id
    # @param [Hash] opts the optional parameters
    # @return [TagListSchema]
    def get_invitation_tags(invitation_id, opts = {})
      data, _status_code, _headers = get_invitation_tags_with_http_info(invitation_id, opts)
      data
    end

    # Get the tags for this invitation 
    # Get the tags for this invitation 
    # @param invitation_id invitation id
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagListSchema, Fixnum, Hash)>] TagListSchema data, response status code and response headers
    def get_invitation_tags_with_http_info(invitation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_invitation_tags ...'
      end
      # verify the required parameter 'invitation_id' is set
      if @api_client.config.client_side_validation && invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.get_invitation_tags"
      end
      # resource path
      local_var_path = '/invitations/{invitationId}/tags'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_invitation_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a information about a private invitation.
    # Get a information about a private invitation.
    # @param invitation_id invitation id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results (default to false)
    # @return [PrivateInvitationSchema]
    def get_private_invitation(invitation_id, opts = {})
      data, _status_code, _headers = get_private_invitation_with_http_info(invitation_id, opts)
      data
    end

    # Get a information about a private invitation.
    # Get a information about a private invitation.
    # @param invitation_id invitation id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results
    # @return [Array<(PrivateInvitationSchema, Fixnum, Hash)>] PrivateInvitationSchema data, response status code and response headers
    def get_private_invitation_with_http_info(invitation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_private_invitation ...'
      end
      # verify the required parameter 'invitation_id' is set
      if @api_client.config.client_side_validation && invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.get_private_invitation"
      end
      # resource path
      local_var_path = '/invitations/private/{invitationId}'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeRegistrationCount'] = opts[:'include_registration_count'] if !opts[:'include_registration_count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PrivateInvitationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_private_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the status of an invitation job.
    # Get the status of a job to send out private invitations.
    # @param invitation_id invitation id
    # @param [Hash] opts the optional parameters
    # @return [InvitationJobStatusSchema]
    def get_private_invitation_job_status(invitation_id, opts = {})
      data, _status_code, _headers = get_private_invitation_job_status_with_http_info(invitation_id, opts)
      data
    end

    # Get the status of an invitation job.
    # Get the status of a job to send out private invitations.
    # @param invitation_id invitation id
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvitationJobStatusSchema, Fixnum, Hash)>] InvitationJobStatusSchema data, response status code and response headers
    def get_private_invitation_job_status_with_http_info(invitation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_private_invitation_job_status ...'
      end
      # verify the required parameter 'invitation_id' is set
      if @api_client.config.client_side_validation && invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.get_private_invitation_job_status"
      end
      # resource path
      local_var_path = '/invitations/private/{invitationId}/jobStatus'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvitationJobStatusSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_private_invitation_job_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of all private invitations.
    # Retrieves a list of all private invitations, optionally filtered by the given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Limit the results to invitations with courseIds that match the filter.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (default to updated)
    # @option opts [Array<String>] :tags 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [PrivateInvitationList]
    def get_private_invitations(opts = {})
      data, _status_code, _headers = get_private_invitations_with_http_info(opts)
      data
    end

    # Get a list of all private invitations.
    # Retrieves a list of all private invitations, optionally filtered by the given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Limit the results to invitations with courseIds that match the filter.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;.
    # @option opts [Array<String>] :tags 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [Array<(PrivateInvitationList, Fixnum, Hash)>] PrivateInvitationList data, response status code and response headers
    def get_private_invitations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_private_invitations ...'
      end
      if @api_client.config.client_side_validation && opts[:'datetime_filter'] && !['created', 'updated'].include?(opts[:'datetime_filter'])
        fail ArgumentError, 'invalid value for "datetime_filter", must be one of created, updated'
      end
      # resource path
      local_var_path = '/invitations/private'

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PrivateInvitationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_private_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of user invitations.
    # Get a list of objects which contain the specific information about each user to whom this invitation was sent.
    # @param invitation_id invitation id
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [BOOLEAN] :include_registration_report 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [UserInvitationList]
    def get_private_user_invitations(invitation_id, opts = {})
      data, _status_code, _headers = get_private_user_invitations_with_http_info(invitation_id, opts)
      data
    end

    # Get a list of user invitations.
    # Get a list of objects which contain the specific information about each user to whom this invitation was sent.
    # @param invitation_id invitation id
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [BOOLEAN] :include_registration_report 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [Array<(UserInvitationList, Fixnum, Hash)>] UserInvitationList data, response status code and response headers
    def get_private_user_invitations_with_http_info(invitation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_private_user_invitations ...'
      end
      # verify the required parameter 'invitation_id' is set
      if @api_client.config.client_side_validation && invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.get_private_user_invitations"
      end
      # resource path
      local_var_path = '/invitations/private/{invitationId}/userInvitations'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'includeRegistrationReport'] = opts[:'include_registration_report'] if !opts[:'include_registration_report'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserInvitationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_private_user_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a information about a public invitation.
    # Get a information about a public invitation.
    # @param invitation_id invitation id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results (default to false)
    # @return [PublicInvitationSchema]
    def get_public_invitation(invitation_id, opts = {})
      data, _status_code, _headers = get_public_invitation_with_http_info(invitation_id, opts)
      data
    end

    # Get a information about a public invitation.
    # Get a information about a public invitation.
    # @param invitation_id invitation id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results
    # @return [Array<(PublicInvitationSchema, Fixnum, Hash)>] PublicInvitationSchema data, response status code and response headers
    def get_public_invitation_with_http_info(invitation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_public_invitation ...'
      end
      # verify the required parameter 'invitation_id' is set
      if @api_client.config.client_side_validation && invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.get_public_invitation"
      end
      # resource path
      local_var_path = '/invitations/public/{invitationId}'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeRegistrationCount'] = opts[:'include_registration_count'] if !opts[:'include_registration_count'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicInvitationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_public_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of all public invitations.
    # Retrieves a list of all public invitations, optionally filtered by the given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Limit the results to invitations with courseIds that match the filter.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;. (default to updated)
    # @option opts [Array<String>] :tags 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [PublicInvitationList]
    def get_public_invitations(opts = {})
      data, _status_code, _headers = get_public_invitations_with_http_info(opts)
      data
    end

    # Get a list of all public invitations.
    # Retrieves a list of all public invitations, optionally filtered by the given parameters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :course_id Limit the results to invitations with courseIds that match the filter.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :datetime_filter A string describing what the since/until parameters will be applied to. Options are: &#39;created&#39; or &#39;updated&#39;.  If not provided, it will default to &#x60;updated&#x60;.
    # @option opts [Array<String>] :tags 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [Array<(PublicInvitationList, Fixnum, Hash)>] PublicInvitationList data, response status code and response headers
    def get_public_invitations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_public_invitations ...'
      end
      if @api_client.config.client_side_validation && opts[:'datetime_filter'] && !['created', 'updated'].include?(opts[:'datetime_filter'])
        fail ArgumentError, 'invalid value for "datetime_filter", must be one of created, updated'
      end
      # resource path
      local_var_path = '/invitations/public'

      # query parameters
      query_params = {}
      query_params[:'courseId'] = opts[:'course_id'] if !opts[:'course_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'datetimeFilter'] = opts[:'datetime_filter'] if !opts[:'datetime_filter'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicInvitationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_public_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a list of user invitations.
    # Get a list of objects which contain the specific information about each user who visited the invitation link.
    # @param invitation_id invitation id
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [BOOLEAN] :include_registration_report 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [UserInvitationList]
    def get_public_user_invitations(invitation_id, opts = {})
      data, _status_code, _headers = get_public_user_invitations_with_http_info(invitation_id, opts)
      data
    end

    # Get a list of user invitations.
    # Get a list of objects which contain the specific information about each user who visited the invitation link.
    # @param invitation_id invitation id
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [BOOLEAN] :include_registration_report 
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [Array<(UserInvitationList, Fixnum, Hash)>] UserInvitationList data, response status code and response headers
    def get_public_user_invitations_with_http_info(invitation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.get_public_user_invitations ...'
      end
      # verify the required parameter 'invitation_id' is set
      if @api_client.config.client_side_validation && invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.get_public_user_invitations"
      end
      # resource path
      local_var_path = '/invitations/public/{invitationId}/userInvitations'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'includeRegistrationReport'] = opts[:'include_registration_report'] if !opts[:'include_registration_report'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserInvitationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#get_public_user_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set the tags for this invitation 
    # Set the tags for this invitation 
    # @param invitation_id invitation id
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_invitation_tags(invitation_id, tags, opts = {})
      put_invitation_tags_with_http_info(invitation_id, tags, opts)
      nil
    end

    # Set the tags for this invitation 
    # Set the tags for this invitation 
    # @param invitation_id invitation id
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_invitation_tags_with_http_info(invitation_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.put_invitation_tags ...'
      end
      # verify the required parameter 'invitation_id' is set
      if @api_client.config.client_side_validation && invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.put_invitation_tags"
      end
      # verify the required parameter 'tags' is set
      if @api_client.config.client_side_validation && tags.nil?
        fail ArgumentError, "Missing the required parameter 'tags' when calling InvitationsApi.put_invitation_tags"
      end
      # resource path
      local_var_path = '/invitations/{invitationId}/tags'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#put_invitation_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sets all of the provided tags on all of the provided invitations 
    # Sets all of the provided tags on all of the provided invitations 
    # @param batch Object representing an array of ids to apply an array of tags to.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_invitation_tags_batch(batch, opts = {})
      put_invitation_tags_batch_with_http_info(batch, opts)
      nil
    end

    # Sets all of the provided tags on all of the provided invitations 
    # Sets all of the provided tags on all of the provided invitations 
    # @param batch Object representing an array of ids to apply an array of tags to.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_invitation_tags_batch_with_http_info(batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.put_invitation_tags_batch ...'
      end
      # verify the required parameter 'batch' is set
      if @api_client.config.client_side_validation && batch.nil?
        fail ArgumentError, "Missing the required parameter 'batch' when calling InvitationsApi.put_invitation_tags_batch"
      end
      # resource path
      local_var_path = '/invitations/tags'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(batch)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#put_invitation_tags_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update attributes of this invitation.
    # Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - invitationEmail - postBack - expirationDate NOTE: Any attributes not in the above list will not be considered for update.
    # @param invitation_id invitation id
    # @param invitation_update_schema A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.
    # @param [Hash] opts the optional parameters
    # @return [PrivateInvitationSchema]
    def update_private_invitation(invitation_id, invitation_update_schema, opts = {})
      data, _status_code, _headers = update_private_invitation_with_http_info(invitation_id, invitation_update_schema, opts)
      data
    end

    # Update attributes of this invitation.
    # Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - invitationEmail - postBack - expirationDate NOTE: Any attributes not in the above list will not be considered for update.
    # @param invitation_id invitation id
    # @param invitation_update_schema A PrivateInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrivateInvitationSchema, Fixnum, Hash)>] PrivateInvitationSchema data, response status code and response headers
    def update_private_invitation_with_http_info(invitation_id, invitation_update_schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.update_private_invitation ...'
      end
      # verify the required parameter 'invitation_id' is set
      if @api_client.config.client_side_validation && invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.update_private_invitation"
      end
      # verify the required parameter 'invitation_update_schema' is set
      if @api_client.config.client_side_validation && invitation_update_schema.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_update_schema' when calling InvitationsApi.update_private_invitation"
      end
      # resource path
      local_var_path = '/invitations/private/{invitationId}'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(invitation_update_schema)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PrivateInvitationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#update_private_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update attributes of this invitation.
    # Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - allowNewRegistrations - postBack - expirationDate - registrationCap NOTE: Any attributes not in the above list will not be considered for update.
    # @param invitation_id invitation id
    # @param invitation_update_schema A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.
    # @param [Hash] opts the optional parameters
    # @return [PublicInvitationSchema]
    def update_public_invitation(invitation_id, invitation_update_schema, opts = {})
      data, _status_code, _headers = update_public_invitation_with_http_info(invitation_id, invitation_update_schema, opts)
      data
    end

    # Update attributes of this invitation.
    # Updates certain attributes of this invitation, and returns the invitation its new state.  The following attributes can be updated: - allowLaunch - allowNewRegistrations - postBack - expirationDate - registrationCap NOTE: Any attributes not in the above list will not be considered for update.
    # @param invitation_id invitation id
    # @param invitation_update_schema A PublicInvitationSchema with values to update.  This can be a sparse schema only containing the values to be updated.  Any value not allowed for update will be ignored.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublicInvitationSchema, Fixnum, Hash)>] PublicInvitationSchema data, response status code and response headers
    def update_public_invitation_with_http_info(invitation_id, invitation_update_schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InvitationsApi.update_public_invitation ...'
      end
      # verify the required parameter 'invitation_id' is set
      if @api_client.config.client_side_validation && invitation_id.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_id' when calling InvitationsApi.update_public_invitation"
      end
      # verify the required parameter 'invitation_update_schema' is set
      if @api_client.config.client_side_validation && invitation_update_schema.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_update_schema' when calling InvitationsApi.update_public_invitation"
      end
      # resource path
      local_var_path = '/invitations/public/{invitationId}'.sub('{' + 'invitationId' + '}', invitation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(invitation_update_schema)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PublicInvitationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvitationsApi#update_public_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
