=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module RusticiSoftwareCloudV2
  class ApplicationManagementApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # A call to this method will create a new application and return a basic object describing it.
    # @param application_name 
    # @param [Hash] opts the optional parameters
    # @return [ApplicationSchema]
    def create_application(application_name, opts = {})
      data, _status_code, _headers = create_application_with_http_info(application_name, opts)
      return data
    end

    # 
    # A call to this method will create a new application and return a basic object describing it.
    # @param application_name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationSchema, Fixnum, Hash)>] ApplicationSchema data, response status code and response headers
    def create_application_with_http_info(application_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApplicationManagementApi.create_application ..."
      end
      # verify the required parameter 'application_name' is set
      fail ArgumentError, "Missing the required parameter 'application_name' when calling ApplicationManagementApi.create_application" if application_name.nil?
      # resource path
      local_var_path = "/appManagement/applications".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(application_name)
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#create_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Create a new credential (aka secret key) for use with the `childAppId`. 
    # @param child_app_id 
    # @param credential_request 
    # @param [Hash] opts the optional parameters
    # @return [CredentialCreatedSchema]
    def create_credential(child_app_id, credential_request, opts = {})
      data, _status_code, _headers = create_credential_with_http_info(child_app_id, credential_request, opts)
      return data
    end

    # 
    # Create a new credential (aka secret key) for use with the &#x60;childAppId&#x60;. 
    # @param child_app_id 
    # @param credential_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CredentialCreatedSchema, Fixnum, Hash)>] CredentialCreatedSchema data, response status code and response headers
    def create_credential_with_http_info(child_app_id, credential_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApplicationManagementApi.create_credential ..."
      end
      # verify the required parameter 'child_app_id' is set
      fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.create_credential" if child_app_id.nil?
      # verify the required parameter 'credential_request' is set
      fail ArgumentError, "Missing the required parameter 'credential_request' when calling ApplicationManagementApi.create_credential" if credential_request.nil?
      # resource path
      local_var_path = "/appManagement/{childAppId}/credentials".sub('{format}','json').sub('{' + 'childAppId' + '}', child_app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(credential_request)
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CredentialCreatedSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#create_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Creates, signs and returns an OAuth2 token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.
    # @param token_request 
    # @param [Hash] opts the optional parameters
    # @return [StringResultSchema]
    def create_token(token_request, opts = {})
      data, _status_code, _headers = create_token_with_http_info(token_request, opts)
      return data
    end

    # 
    # Creates, signs and returns an OAuth2 token based on the provided permissions, if the credentials used to request the token have the permissions being requested. Note: the token is not stored and therefore can not be modified or deleted. The requested permissions are encoded in the token which is then signed. As long as the secret used to create it is not changed the token will be valid until it expires.
    # @param token_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringResultSchema, Fixnum, Hash)>] StringResultSchema data, response status code and response headers
    def create_token_with_http_info(token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApplicationManagementApi.create_token ..."
      end
      # verify the required parameter 'token_request' is set
      fail ArgumentError, "Missing the required parameter 'token_request' when calling ApplicationManagementApi.create_token" if token_request.nil?
      # resource path
      local_var_path = "/appManagement/token".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(token_request)
      auth_names = ['APP_NORMAL']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StringResultSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#create_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown.
    # @param child_app_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_application(child_app_id, opts = {})
      delete_application_with_http_info(child_app_id, opts)
      return nil
    end

    # 
    # Delete an application.  If the application contains content, it must first be manually removed before calling this method, else an error will be thrown.
    # @param child_app_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_application_with_http_info(child_app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApplicationManagementApi.delete_application ..."
      end
      # verify the required parameter 'child_app_id' is set
      fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.delete_application" if child_app_id.nil?
      # resource path
      local_var_path = "/appManagement/applications/{childAppId}".sub('{format}','json').sub('{' + 'childAppId' + '}', child_app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#delete_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clears the `settingId` value for this level 
    # Clears the setting value at this level.  This is effectively reverting the setting to the system level default. 
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
    # @return [nil]
    def delete_application_configuration_setting(setting_id, opts = {})
      delete_application_configuration_setting_with_http_info(setting_id, opts)
      return nil
    end

    # Clears the &#x60;settingId&#x60; value for this level 
    # Clears the setting value at this level.  This is effectively reverting the setting to the system level default. 
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_application_configuration_setting_with_http_info(setting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApplicationManagementApi.delete_application_configuration_setting ..."
      end
      # verify the required parameter 'setting_id' is set
      fail ArgumentError, "Missing the required parameter 'setting_id' when calling ApplicationManagementApi.delete_application_configuration_setting" if setting_id.nil?
      if opts[:'learning_standard'] && !['SCORM_11', 'SCORM_12', 'SCORM_2004_2ND_EDITION', 'SCORM_2004_3RD_EDITION', 'SCORM_2004_4TH_EDITION', 'AICC', 'XAPI', 'CMI5'].include?(opts[:'learning_standard'])
        fail ArgumentError, 'invalid value for "learning_standard", must be one of SCORM_11, SCORM_12, SCORM_2004_2ND_EDITION, SCORM_2004_3RD_EDITION, SCORM_2004_4TH_EDITION, AICC, XAPI, CMI5'
      end
      # resource path
      local_var_path = "/appManagement/configuration/{settingId}".sub('{format}','json').sub('{' + 'settingId' + '}', setting_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'learningStandard'] = opts[:'learning_standard'] if !opts[:'learning_standard'].nil?
      query_params[:'singleSco'] = opts[:'single_sco'] if !opts[:'single_sco'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#delete_application_configuration_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Delete `credentialId` from the system.  Note: if an application's last secret key is deleted it will not be able to use the SCORM Cloud api until another key is granted to it via `CreateCredential`.  Removing the last secret key may also disable some priviledges in the website. 
    # @param child_app_id 
    # @param credential_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_credential(child_app_id, credential_id, opts = {})
      delete_credential_with_http_info(child_app_id, credential_id, opts)
      return nil
    end

    # 
    # Delete &#x60;credentialId&#x60; from the system.  Note: if an application&#39;s last secret key is deleted it will not be able to use the SCORM Cloud api until another key is granted to it via &#x60;CreateCredential&#x60;.  Removing the last secret key may also disable some priviledges in the website. 
    # @param child_app_id 
    # @param credential_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_credential_with_http_info(child_app_id, credential_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApplicationManagementApi.delete_credential ..."
      end
      # verify the required parameter 'child_app_id' is set
      fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.delete_credential" if child_app_id.nil?
      # verify the required parameter 'credential_id' is set
      fail ArgumentError, "Missing the required parameter 'credential_id' when calling ApplicationManagementApi.delete_credential" if credential_id.nil?
      # resource path
      local_var_path = "/appManagement/{childAppId}/credentials/{credentialId}".sub('{format}','json').sub('{' + 'childAppId' + '}', child_app_id.to_s).sub('{' + 'credentialId' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#delete_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Returns all configuration settings for this level. These settings will only affect items within this application which do not have that setting themselves.  >Note -----  >This resource actually represents 2 distinct levels which are:  >- ALL content in an application.  This is achieved by leaving `learningStandard` and `singleSco`   as `null`.  Anything set at the learningStandard/singleSco level will take precedence over these   settings. - Content falling into a learningStandard/singleSco category.  This allows setting more specific   defaults for a particular learningStandard/singleSco combination.  Note: both `learningStandard`   and `singleSco` must be provided, as this level is considered to be identified by those items   joined. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
    # @option opts [BOOLEAN] :include_metadata  (default to false)
    # @return [SettingListSchema]
    def get_application_configuration(opts = {})
      data, _status_code, _headers = get_application_configuration_with_http_info(opts)
      return data
    end

    # 
    # Returns all configuration settings for this level. These settings will only affect items within this application which do not have that setting themselves.  &gt;Note -----  &gt;This resource actually represents 2 distinct levels which are:  &gt;- ALL content in an application.  This is achieved by leaving &#x60;learningStandard&#x60; and &#x60;singleSco&#x60;   as &#x60;null&#x60;.  Anything set at the learningStandard/singleSco level will take precedence over these   settings. - Content falling into a learningStandard/singleSco category.  This allows setting more specific   defaults for a particular learningStandard/singleSco combination.  Note: both &#x60;learningStandard&#x60;   and &#x60;singleSco&#x60; must be provided, as this level is considered to be identified by those items   joined. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
    # @option opts [BOOLEAN] :include_metadata 
    # @return [Array<(SettingListSchema, Fixnum, Hash)>] SettingListSchema data, response status code and response headers
    def get_application_configuration_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApplicationManagementApi.get_application_configuration ..."
      end
      if opts[:'learning_standard'] && !['SCORM_11', 'SCORM_12', 'SCORM_2004_2ND_EDITION', 'SCORM_2004_3RD_EDITION', 'SCORM_2004_4TH_EDITION', 'AICC', 'XAPI', 'CMI5'].include?(opts[:'learning_standard'])
        fail ArgumentError, 'invalid value for "learning_standard", must be one of SCORM_11, SCORM_12, SCORM_2004_2ND_EDITION, SCORM_2004_3RD_EDITION, SCORM_2004_4TH_EDITION, AICC, XAPI, CMI5'
      end
      # resource path
      local_var_path = "/appManagement/configuration".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'learningStandard'] = opts[:'learning_standard'] if !opts[:'learning_standard'].nil?
      query_params[:'singleSco'] = opts[:'single_sco'] if !opts[:'single_sco'].nil?
      query_params[:'includeMetadata'] = opts[:'include_metadata'] if !opts[:'include_metadata'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SettingListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#get_application_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of all applications for the realm.
    # Get list of all applications in this realm.
    # @param [Hash] opts the optional parameters
    # @return [ApplicationListSchema]
    def get_application_list(opts = {})
      data, _status_code, _headers = get_application_list_with_http_info(opts)
      return data
    end

    # Get a list of all applications for the realm.
    # Get list of all applications in this realm.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationListSchema, Fixnum, Hash)>] ApplicationListSchema data, response status code and response headers
    def get_application_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApplicationManagementApi.get_application_list ..."
      end
      # resource path
      local_var_path = "/appManagement/applications".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#get_application_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Retrieve a list of all credentials (aka secret keys) belonging to `childAppId` and their statuses. 
    # @param child_app_id 
    # @param [Hash] opts the optional parameters
    # @return [CredentialListSchema]
    def get_credentials(child_app_id, opts = {})
      data, _status_code, _headers = get_credentials_with_http_info(child_app_id, opts)
      return data
    end

    # 
    # Retrieve a list of all credentials (aka secret keys) belonging to &#x60;childAppId&#x60; and their statuses. 
    # @param child_app_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CredentialListSchema, Fixnum, Hash)>] CredentialListSchema data, response status code and response headers
    def get_credentials_with_http_info(child_app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApplicationManagementApi.get_credentials ..."
      end
      # verify the required parameter 'child_app_id' is set
      fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.get_credentials" if child_app_id.nil?
      # resource path
      local_var_path = "/appManagement/{childAppId}/credentials".sub('{format}','json').sub('{' + 'childAppId' + '}', child_app_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CredentialListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#get_credentials\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Set configuration settings for the application level.  These settings will only affect items within the application which do not have their own configuration set.  This can be used to effectively set application level defaults. 
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
    # @return [nil]
    def set_application_configuration(configuration_settings, opts = {})
      set_application_configuration_with_http_info(configuration_settings, opts)
      return nil
    end

    # 
    # Set configuration settings for the application level.  These settings will only affect items within the application which do not have their own configuration set.  This can be used to effectively set application level defaults. 
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learning_standard If specified, the request will be scoped to the provided learning standard.
    # @option opts [BOOLEAN] :single_sco Required if learningStandard is specified. Scopes settings to whether a package has only one SCO or assignable unit within it or not. To apply a configuration setting to a learning standard for single and multi-SCO content, it must be set for both scopes.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_application_configuration_with_http_info(configuration_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApplicationManagementApi.set_application_configuration ..."
      end
      # verify the required parameter 'configuration_settings' is set
      fail ArgumentError, "Missing the required parameter 'configuration_settings' when calling ApplicationManagementApi.set_application_configuration" if configuration_settings.nil?
      if opts[:'learning_standard'] && !['SCORM_11', 'SCORM_12', 'SCORM_2004_2ND_EDITION', 'SCORM_2004_3RD_EDITION', 'SCORM_2004_4TH_EDITION', 'AICC', 'XAPI', 'CMI5'].include?(opts[:'learning_standard'])
        fail ArgumentError, 'invalid value for "learning_standard", must be one of SCORM_11, SCORM_12, SCORM_2004_2ND_EDITION, SCORM_2004_3RD_EDITION, SCORM_2004_4TH_EDITION, AICC, XAPI, CMI5'
      end
      # resource path
      local_var_path = "/appManagement/configuration".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'learningStandard'] = opts[:'learning_standard'] if !opts[:'learning_standard'].nil?
      query_params[:'singleSco'] = opts[:'single_sco'] if !opts[:'single_sco'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration_settings)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#set_application_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Update the name or status associated with `credentialId`.  If the status is updated to disabled, the credential will no longer be valid for authorization through the API.  If the last (or only) key for an application is disabled it may affect some website priviledges 
    # @param child_app_id 
    # @param credential_id 
    # @param credential_update 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_credential(child_app_id, credential_id, credential_update, opts = {})
      update_credential_with_http_info(child_app_id, credential_id, credential_update, opts)
      return nil
    end

    # 
    # Update the name or status associated with &#x60;credentialId&#x60;.  If the status is updated to disabled, the credential will no longer be valid for authorization through the API.  If the last (or only) key for an application is disabled it may affect some website priviledges 
    # @param child_app_id 
    # @param credential_id 
    # @param credential_update 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_credential_with_http_info(child_app_id, credential_id, credential_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ApplicationManagementApi.update_credential ..."
      end
      # verify the required parameter 'child_app_id' is set
      fail ArgumentError, "Missing the required parameter 'child_app_id' when calling ApplicationManagementApi.update_credential" if child_app_id.nil?
      # verify the required parameter 'credential_id' is set
      fail ArgumentError, "Missing the required parameter 'credential_id' when calling ApplicationManagementApi.update_credential" if credential_id.nil?
      # verify the required parameter 'credential_update' is set
      fail ArgumentError, "Missing the required parameter 'credential_update' when calling ApplicationManagementApi.update_credential" if credential_update.nil?
      # resource path
      local_var_path = "/appManagement/{childAppId}/credentials/{credentialId}".sub('{format}','json').sub('{' + 'childAppId' + '}', child_app_id.to_s).sub('{' + 'credentialId' + '}', credential_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(credential_update)
      auth_names = ['APP_MANAGEMENT', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationManagementApi#update_credential\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
