=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module RusticiSoftwareCloudV2
  class CourseApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get a link to preview a course. 
    # Returns the launch link to use to preview this course. 
    # @param course_id 
    # @param launch_link_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :css_url 
    # @return [LaunchLinkSchema]
    def build_course_preview_launch_link(course_id, launch_link_request, opts = {})
      data, _status_code, _headers = build_course_preview_launch_link_with_http_info(course_id, launch_link_request, opts)
      return data
    end

    # Get a link to preview a course. 
    # Returns the launch link to use to preview this course. 
    # @param course_id 
    # @param launch_link_request 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :css_url 
    # @return [Array<(LaunchLinkSchema, Fixnum, Hash)>] LaunchLinkSchema data, response status code and response headers
    def build_course_preview_launch_link_with_http_info(course_id, launch_link_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.build_course_preview_launch_link ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.build_course_preview_launch_link" if course_id.nil?
      # verify the required parameter 'launch_link_request' is set
      fail ArgumentError, "Missing the required parameter 'launch_link_request' when calling CourseApi.build_course_preview_launch_link" if launch_link_request.nil?
      # resource path
      local_var_path = "/courses/{courseId}/preview".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cssUrl'] = opts[:'css_url'] if !opts[:'css_url'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(launch_link_request)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LaunchLinkSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#build_course_preview_launch_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a link to preview a particular course version. 
    # Returns the link to use to preview a particular version of a course. 
    # @param course_id 
    # @param version_id The course version
    # @param launch_link_request 
    # @param [Hash] opts the optional parameters
    # @return [LaunchLinkSchema]
    def build_course_preview_launch_link_with_version(course_id, version_id, launch_link_request, opts = {})
      data, _status_code, _headers = build_course_preview_launch_link_with_version_with_http_info(course_id, version_id, launch_link_request, opts)
      return data
    end

    # Get a link to preview a particular course version. 
    # Returns the link to use to preview a particular version of a course. 
    # @param course_id 
    # @param version_id The course version
    # @param launch_link_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LaunchLinkSchema, Fixnum, Hash)>] LaunchLinkSchema data, response status code and response headers
    def build_course_preview_launch_link_with_version_with_http_info(course_id, version_id, launch_link_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.build_course_preview_launch_link_with_version ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.build_course_preview_launch_link_with_version" if course_id.nil?
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling CourseApi.build_course_preview_launch_link_with_version" if version_id.nil?
      # verify the required parameter 'launch_link_request' is set
      fail ArgumentError, "Missing the required parameter 'launch_link_request' when calling CourseApi.build_course_preview_launch_link_with_version" if launch_link_request.nil?
      # resource path
      local_var_path = "/courses/{courseId}/versions/{versionId}/preview".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s).sub('{' + 'versionId' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(launch_link_request)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LaunchLinkSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#build_course_preview_launch_link_with_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch and import a course. 
    # An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
    # @param course_id A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.
    # @param import_request 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :may_create_new_version Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (default to false)
    # @option opts [String] :postback_url An optional parameter that specifies a URL to send a postback to when the course has finished uploading.
    # @return [StringResultSchema]
    def create_fetch_and_import_course_job(course_id, import_request, opts = {})
      data, _status_code, _headers = create_fetch_and_import_course_job_with_http_info(course_id, import_request, opts)
      return data
    end

    # Fetch and import a course. 
    # An import job will be started to fetch and import the referenced file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
    # @param course_id A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.
    # @param import_request 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :may_create_new_version Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist.
    # @option opts [String] :postback_url An optional parameter that specifies a URL to send a postback to when the course has finished uploading.
    # @return [Array<(StringResultSchema, Fixnum, Hash)>] StringResultSchema data, response status code and response headers
    def create_fetch_and_import_course_job_with_http_info(course_id, import_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.create_fetch_and_import_course_job ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.create_fetch_and_import_course_job" if course_id.nil?
      # verify the required parameter 'import_request' is set
      fail ArgumentError, "Missing the required parameter 'import_request' when calling CourseApi.create_fetch_and_import_course_job" if import_request.nil?
      # resource path
      local_var_path = "/courses/importJobs".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'courseId'] = course_id
      query_params[:'mayCreateNewVersion'] = opts[:'may_create_new_version'] if !opts[:'may_create_new_version'].nil?
      query_params[:'postbackUrl'] = opts[:'postback_url'] if !opts[:'postback_url'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(import_request)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StringResultSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#create_fetch_and_import_course_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload and import a course.
    # An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
    # @param course_id A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :may_create_new_version Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist. (default to false)
    # @option opts [String] :postback_url An optional parameter that specifies a URL to send a postback to when the course has finished uploading.
    # @option opts [File] :file The zip file of the course contents to import.
    # @return [StringResultSchema]
    def create_upload_and_import_course_job(course_id, opts = {})
      data, _status_code, _headers = create_upload_and_import_course_job_with_http_info(course_id, opts)
      return data
    end

    # Upload and import a course.
    # An import job will be started to import the posted file, and the import job ID will be returned. If the import is successful, the imported course will be registered using the courseId provided.  To check the progress of the import job, GetImportJobStatus should be called with the job ID returned from this call. 
    # @param course_id A unique identifier your application will use to identify the course after import. Your application is responsible both for generating this unique ID and for keeping track of the ID for later use.
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :may_create_new_version Is it OK to create a new version of this course? If this is set to false and the course already exists, the upload will fail. If true and the course already exists then a new version will be created. No effect if the course doesn&#39;t already exist.
    # @option opts [String] :postback_url An optional parameter that specifies a URL to send a postback to when the course has finished uploading.
    # @option opts [File] :file The zip file of the course contents to import.
    # @return [Array<(StringResultSchema, Fixnum, Hash)>] StringResultSchema data, response status code and response headers
    def create_upload_and_import_course_job_with_http_info(course_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.create_upload_and_import_course_job ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.create_upload_and_import_course_job" if course_id.nil?
      # resource path
      local_var_path = "/courses/importJobs/upload".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'courseId'] = course_id
      query_params[:'mayCreateNewVersion'] = opts[:'may_create_new_version'] if !opts[:'may_create_new_version'].nil?
      query_params[:'postbackUrl'] = opts[:'postback_url'] if !opts[:'postback_url'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["file"] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StringResultSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#create_upload_and_import_course_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a course. 
    # Delete course identified by `courseId`.  When a course is deleted, so is everything connected to this course.  This includes:  - Registrations - Invitations - Dispatches - Debug Logs 
    # @param course_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_course(course_id, opts = {})
      delete_course_with_http_info(course_id, opts)
      return nil
    end

    # Delete a course. 
    # Delete course identified by &#x60;courseId&#x60;.  When a course is deleted, so is everything connected to this course.  This includes:  - Registrations - Invitations - Dispatches - Debug Logs 
    # @param course_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_course_with_http_info(course_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.delete_course ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.delete_course" if course_id.nil?
      # resource path
      local_var_path = "/courses/{courseId}".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#delete_course\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear a course configuration. 
    # Clears the value of the given `settingId` for this course.  The effective setting value will become any value set at the application level (if this value is set at the application level) or the default setting. 
    # @param course_id 
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_course_configuration_setting(course_id, setting_id, opts = {})
      delete_course_configuration_setting_with_http_info(course_id, setting_id, opts)
      return nil
    end

    # Clear a course configuration. 
    # Clears the value of the given &#x60;settingId&#x60; for this course.  The effective setting value will become any value set at the application level (if this value is set at the application level) or the default setting. 
    # @param course_id 
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_course_configuration_setting_with_http_info(course_id, setting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.delete_course_configuration_setting ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.delete_course_configuration_setting" if course_id.nil?
      # verify the required parameter 'setting_id' is set
      fail ArgumentError, "Missing the required parameter 'setting_id' when calling CourseApi.delete_course_configuration_setting" if setting_id.nil?
      # resource path
      local_var_path = "/courses/{courseId}/configuration/{settingId}".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s).sub('{' + 'settingId' + '}', setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#delete_course_configuration_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete course tags. 
    # Delete the provided tags from this course. 
    # @param course_id 
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_course_tags(course_id, tags, opts = {})
      delete_course_tags_with_http_info(course_id, tags, opts)
      return nil
    end

    # Delete course tags. 
    # Delete the provided tags from this course. 
    # @param course_id 
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_course_tags_with_http_info(course_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.delete_course_tags ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.delete_course_tags" if course_id.nil?
      # verify the required parameter 'tags' is set
      fail ArgumentError, "Missing the required parameter 'tags' when calling CourseApi.delete_course_tags" if tags.nil?
      # resource path
      local_var_path = "/courses/{courseId}/tags".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#delete_course_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a course version. 
    # Delete `versionId` of `courseId`.  If this is the last remaining version of this course, the course itself will be deleted and no longer accessible. 
    # @param course_id 
    # @param version_id The course version
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_course_version(course_id, version_id, opts = {})
      delete_course_version_with_http_info(course_id, version_id, opts)
      return nil
    end

    # Delete a course version. 
    # Delete &#x60;versionId&#x60; of &#x60;courseId&#x60;.  If this is the last remaining version of this course, the course itself will be deleted and no longer accessible. 
    # @param course_id 
    # @param version_id The course version
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_course_version_with_http_info(course_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.delete_course_version ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.delete_course_version" if course_id.nil?
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling CourseApi.delete_course_version" if version_id.nil?
      # resource path
      local_var_path = "/courses/{courseId}/versions/{versionId}".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s).sub('{' + 'versionId' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#delete_course_version\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear a configuration setting for a version of a course. 
    # Clears the `settingId` value for this course and version. 
    # @param course_id 
    # @param version_id The course version
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_course_version_configuration_setting(course_id, version_id, setting_id, opts = {})
      delete_course_version_configuration_setting_with_http_info(course_id, version_id, setting_id, opts)
      return nil
    end

    # Clear a configuration setting for a version of a course. 
    # Clears the &#x60;settingId&#x60; value for this course and version. 
    # @param course_id 
    # @param version_id The course version
    # @param setting_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_course_version_configuration_setting_with_http_info(course_id, version_id, setting_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.delete_course_version_configuration_setting ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.delete_course_version_configuration_setting" if course_id.nil?
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling CourseApi.delete_course_version_configuration_setting" if version_id.nil?
      # verify the required parameter 'setting_id' is set
      fail ArgumentError, "Missing the required parameter 'setting_id' when calling CourseApi.delete_course_version_configuration_setting" if setting_id.nil?
      # resource path
      local_var_path = "/courses/{courseId}/versions/{versionId}/configuration/{settingId}".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s).sub('{' + 'versionId' + '}', version_id.to_s).sub('{' + 'settingId' + '}', setting_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#delete_course_version_configuration_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get course details. 
    # Get detailed information about `courseId`.  Futher detail can be obtained with the optional query parameters flags. 
    # @param course_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results (default to false)
    # @option opts [BOOLEAN] :include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (default to false)
    # @return [CourseSchema]
    def get_course(course_id, opts = {})
      data, _status_code, _headers = get_course_with_http_info(course_id, opts)
      return data
    end

    # Get course details. 
    # Get detailed information about &#x60;courseId&#x60;.  Futher detail can be obtained with the optional query parameters flags. 
    # @param course_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results
    # @option opts [BOOLEAN] :include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect.
    # @return [Array<(CourseSchema, Fixnum, Hash)>] CourseSchema data, response status code and response headers
    def get_course_with_http_info(course_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.get_course ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.get_course" if course_id.nil?
      # resource path
      local_var_path = "/courses/{courseId}".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeRegistrationCount'] = opts[:'include_registration_count'] if !opts[:'include_registration_count'].nil?
      query_params[:'includeCourseMetadata'] = opts[:'include_course_metadata'] if !opts[:'include_course_metadata'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CourseSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#get_course\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get course configuration. 
    # Returns all effective configuration settings for this course.  For any setting which is not explicitly set at the course level, the effective value will be either the value set at the application level (if there is one) or the default value for the setting. 
    # @param course_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata  (default to false)
    # @return [SettingListSchema]
    def get_course_configuration(course_id, opts = {})
      data, _status_code, _headers = get_course_configuration_with_http_info(course_id, opts)
      return data
    end

    # Get course configuration. 
    # Returns all effective configuration settings for this course.  For any setting which is not explicitly set at the course level, the effective value will be either the value set at the application level (if there is one) or the default value for the setting. 
    # @param course_id 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata 
    # @return [Array<(SettingListSchema, Fixnum, Hash)>] SettingListSchema data, response status code and response headers
    def get_course_configuration_with_http_info(course_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.get_course_configuration ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.get_course_configuration" if course_id.nil?
      # resource path
      local_var_path = "/courses/{courseId}/configuration".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeMetadata'] = opts[:'include_metadata'] if !opts[:'include_metadata'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SettingListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#get_course_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get course xAPI statements. 
    # Get xAPI statements for `courseId`. 
    # @param course_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learner_id Only entries for the specified learner id will be included.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [XapiStatementResult]
    def get_course_statements(course_id, opts = {})
      data, _status_code, _headers = get_course_statements_with_http_info(course_id, opts)
      return data
    end

    # Get course xAPI statements. 
    # Get xAPI statements for &#x60;courseId&#x60;. 
    # @param course_id 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learner_id Only entries for the specified learner id will be included.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [Array<(XapiStatementResult, Fixnum, Hash)>] XapiStatementResult data, response status code and response headers
    def get_course_statements_with_http_info(course_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.get_course_statements ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.get_course_statements" if course_id.nil?
      # resource path
      local_var_path = "/courses/{courseId}/xAPIStatements".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'learnerId'] = opts[:'learner_id'] if !opts[:'learner_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XapiStatementResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#get_course_statements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get course tags. 
    # Get a list of the tags for this course. 
    # @param course_id 
    # @param [Hash] opts the optional parameters
    # @return [TagListSchema]
    def get_course_tags(course_id, opts = {})
      data, _status_code, _headers = get_course_tags_with_http_info(course_id, opts)
      return data
    end

    # Get course tags. 
    # Get a list of the tags for this course. 
    # @param course_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagListSchema, Fixnum, Hash)>] TagListSchema data, response status code and response headers
    def get_course_tags_with_http_info(course_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.get_course_tags ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.get_course_tags" if course_id.nil?
      # resource path
      local_var_path = "/courses/{courseId}/tags".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TagListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#get_course_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get configuration for a version of a course. 
    # Returns all configuration settings for this course and version. 
    # @param course_id 
    # @param version_id The course version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata  (default to false)
    # @return [SettingListSchema]
    def get_course_version_configuration(course_id, version_id, opts = {})
      data, _status_code, _headers = get_course_version_configuration_with_http_info(course_id, version_id, opts)
      return data
    end

    # Get configuration for a version of a course. 
    # Returns all configuration settings for this course and version. 
    # @param course_id 
    # @param version_id The course version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_metadata 
    # @return [Array<(SettingListSchema, Fixnum, Hash)>] SettingListSchema data, response status code and response headers
    def get_course_version_configuration_with_http_info(course_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.get_course_version_configuration ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.get_course_version_configuration" if course_id.nil?
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling CourseApi.get_course_version_configuration" if version_id.nil?
      # resource path
      local_var_path = "/courses/{courseId}/versions/{versionId}/configuration".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s).sub('{' + 'versionId' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeMetadata'] = opts[:'include_metadata'] if !opts[:'include_metadata'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SettingListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#get_course_version_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details on a course version. 
    # Get specific version `versionId` of `courseId` 
    # @param course_id 
    # @param version_id The course version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results (default to false)
    # @option opts [BOOLEAN] :include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (default to false)
    # @return [CourseSchema]
    def get_course_version_info(course_id, version_id, opts = {})
      data, _status_code, _headers = get_course_version_info_with_http_info(course_id, version_id, opts)
      return data
    end

    # Get details on a course version. 
    # Get specific version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
    # @param course_id 
    # @param version_id The course version
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results
    # @option opts [BOOLEAN] :include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect.
    # @return [Array<(CourseSchema, Fixnum, Hash)>] CourseSchema data, response status code and response headers
    def get_course_version_info_with_http_info(course_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.get_course_version_info ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.get_course_version_info" if course_id.nil?
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling CourseApi.get_course_version_info" if version_id.nil?
      # resource path
      local_var_path = "/courses/{courseId}/versions/{versionId}".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s).sub('{' + 'versionId' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'includeRegistrationCount'] = opts[:'include_registration_count'] if !opts[:'include_registration_count'].nil?
      query_params[:'includeCourseMetadata'] = opts[:'include_course_metadata'] if !opts[:'include_course_metadata'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CourseSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#get_course_version_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get xAPI statements for a course version. 
    # Get xAPI statements for version `versionId` of `courseId` 
    # @param course_id 
    # @param version_id The course version
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learner_id Only entries for the specified learner id will be included.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [XapiStatementResult]
    def get_course_version_statements(course_id, version_id, opts = {})
      data, _status_code, _headers = get_course_version_statements_with_http_info(course_id, version_id, opts)
      return data
    end

    # Get xAPI statements for a course version. 
    # Get xAPI statements for version &#x60;versionId&#x60; of &#x60;courseId&#x60; 
    # @param course_id 
    # @param version_id The course version
    # @param [Hash] opts the optional parameters
    # @option opts [String] :learner_id Only entries for the specified learner id will be included.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @return [Array<(XapiStatementResult, Fixnum, Hash)>] XapiStatementResult data, response status code and response headers
    def get_course_version_statements_with_http_info(course_id, version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.get_course_version_statements ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.get_course_version_statements" if course_id.nil?
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling CourseApi.get_course_version_statements" if version_id.nil?
      # resource path
      local_var_path = "/courses/{courseId}/versions/{versionId}/xAPIStatements".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s).sub('{' + 'versionId' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'learnerId'] = opts[:'learner_id'] if !opts[:'learner_id'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'XapiStatementResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#get_course_version_statements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details on a course's versions. 
    # Get information about all versions of `courseId`.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
    # @param course_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results (default to false)
    # @option opts [BOOLEAN] :include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (default to false)
    # @return [CourseListNonPagedSchema]
    def get_course_versions(course_id, opts = {})
      data, _status_code, _headers = get_course_versions_with_http_info(course_id, opts)
      return data
    end

    # Get details on a course&#39;s versions. 
    # Get information about all versions of &#x60;courseId&#x60;.  This can be useful to see information such as registration counts and modification times across the versions of a course. 
    # @param course_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results
    # @option opts [BOOLEAN] :include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect.
    # @return [Array<(CourseListNonPagedSchema, Fixnum, Hash)>] CourseListNonPagedSchema data, response status code and response headers
    def get_course_versions_with_http_info(course_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.get_course_versions ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.get_course_versions" if course_id.nil?
      # resource path
      local_var_path = "/courses/{courseId}/versions".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'includeRegistrationCount'] = opts[:'include_registration_count'] if !opts[:'include_registration_count'].nil?
      query_params[:'includeCourseMetadata'] = opts[:'include_course_metadata'] if !opts[:'include_course_metadata'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CourseListNonPagedSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#get_course_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all courses. 
    # Get all courses for the `appId` which was used to authenticate this call. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id.
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc.
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results (default to false)
    # @option opts [BOOLEAN] :include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect. (default to false)
    # @option opts [Array<String>] :tags 
    # @return [CourseListSchema]
    def get_courses(opts = {})
      data, _status_code, _headers = get_courses_with_http_info(opts)
      return data
    end

    # Get all courses. 
    # Get all courses for the &#x60;appId&#x60; which was used to authenticate this call. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :more Value for this parameter will be provided in the &#39;more&#39; property of registration lists, where needed. An opaque value, construction and parsing may change without notice.
    # @option opts [DateTime] :since Only items updated since the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [DateTime] :_until Only items updated before the specified ISO 8601 TimeStamp (inclusive) are included. If a time zone is not specified, UTC time zone will be used.
    # @option opts [String] :filter Optional string which filters results by a specified field (described by filterBy).
    # @option opts [String] :filter_by Optional enum parameter for specifying the field on which to run the filter.  Defaults to course_id.
    # @option opts [String] :order_by Optional enum parameter for specifying the field and order by which to sort the results.  Defaults to creation_date_desc.
    # @option opts [BOOLEAN] :include_registration_count Include the registration count in the results
    # @option opts [BOOLEAN] :include_course_metadata Include course metadata in the results. If the course has no metadata, adding this parameter has no effect.
    # @option opts [Array<String>] :tags 
    # @return [Array<(CourseListSchema, Fixnum, Hash)>] CourseListSchema data, response status code and response headers
    def get_courses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.get_courses ..."
      end
      if opts[:'filter_by'] && !['title', 'course_id', 'tags'].include?(opts[:'filter_by'])
        fail ArgumentError, 'invalid value for "filter_by", must be one of title, course_id, tags'
      end
      if opts[:'order_by'] && !['title_asc', 'title_desc', 'creation_date_asc', 'creation_date_desc'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of title_asc, title_desc, creation_date_asc, creation_date_desc'
      end
      # resource path
      local_var_path = "/courses".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'more'] = opts[:'more'] if !opts[:'more'].nil?
      query_params[:'since'] = opts[:'since'] if !opts[:'since'].nil?
      query_params[:'until'] = opts[:'_until'] if !opts[:'_until'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'filterBy'] = opts[:'filter_by'] if !opts[:'filter_by'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'includeRegistrationCount'] = opts[:'include_registration_count'] if !opts[:'include_registration_count'].nil?
      query_params[:'includeCourseMetadata'] = opts[:'include_course_metadata'] if !opts[:'include_course_metadata'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :csv) if !opts[:'tags'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CourseListSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#get_courses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get course import job status. 
    # Check the status of an import job.  This can be called incrementally to check to progress of a call to either of the import options. 
    # @param import_job_id Id received when the import job was submitted to the importJobs resource.
    # @param [Hash] opts the optional parameters
    # @return [ImportJobResultSchema]
    def get_import_job_status(import_job_id, opts = {})
      data, _status_code, _headers = get_import_job_status_with_http_info(import_job_id, opts)
      return data
    end

    # Get course import job status. 
    # Check the status of an import job.  This can be called incrementally to check to progress of a call to either of the import options. 
    # @param import_job_id Id received when the import job was submitted to the importJobs resource.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportJobResultSchema, Fixnum, Hash)>] ImportJobResultSchema data, response status code and response headers
    def get_import_job_status_with_http_info(import_job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.get_import_job_status ..."
      end
      # verify the required parameter 'import_job_id' is set
      fail ArgumentError, "Missing the required parameter 'import_job_id' when calling CourseApi.get_import_job_status" if import_job_id.nil?
      # resource path
      local_var_path = "/courses/importJobs/{importJobId}".sub('{format}','json').sub('{' + 'importJobId' + '}', import_job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ImportJobResultSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#get_import_job_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set course tags. 
    # Set the tags for this course.  Note: any tags currently on this course will be overwritten with the new array of tags. 
    # @param course_id 
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_course_tags(course_id, tags, opts = {})
      put_course_tags_with_http_info(course_id, tags, opts)
      return nil
    end

    # Set course tags. 
    # Set the tags for this course.  Note: any tags currently on this course will be overwritten with the new array of tags. 
    # @param course_id 
    # @param tags 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_course_tags_with_http_info(course_id, tags, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.put_course_tags ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.put_course_tags" if course_id.nil?
      # verify the required parameter 'tags' is set
      fail ArgumentError, "Missing the required parameter 'tags' when calling CourseApi.put_course_tags" if tags.nil?
      # resource path
      local_var_path = "/courses/{courseId}/tags".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(tags)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#put_course_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set tags on courses. 
    # Sets all of the provided tags on all of the provided courses. 
    # @param batch Object representing an array of ids to apply an array of tags to.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_course_tags_batch(batch, opts = {})
      put_course_tags_batch_with_http_info(batch, opts)
      return nil
    end

    # Set tags on courses. 
    # Sets all of the provided tags on all of the provided courses. 
    # @param batch Object representing an array of ids to apply an array of tags to.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_course_tags_batch_with_http_info(batch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.put_course_tags_batch ..."
      end
      # verify the required parameter 'batch' is set
      fail ArgumentError, "Missing the required parameter 'batch' when calling CourseApi.put_course_tags_batch" if batch.nil?
      # resource path
      local_var_path = "/courses/tags".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(batch)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#put_course_tags_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set course configuration. 
    # Set configuration settings for this course.  Setting a value at this level will override any value which is set at the application level. 
    # @param course_id 
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_course_configuration(course_id, configuration_settings, opts = {})
      set_course_configuration_with_http_info(course_id, configuration_settings, opts)
      return nil
    end

    # Set course configuration. 
    # Set configuration settings for this course.  Setting a value at this level will override any value which is set at the application level. 
    # @param course_id 
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_course_configuration_with_http_info(course_id, configuration_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.set_course_configuration ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.set_course_configuration" if course_id.nil?
      # verify the required parameter 'configuration_settings' is set
      fail ArgumentError, "Missing the required parameter 'configuration_settings' when calling CourseApi.set_course_configuration" if configuration_settings.nil?
      # resource path
      local_var_path = "/courses/{courseId}/configuration".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration_settings)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#set_course_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the title of a course. 
    # Sets the course title for the provided courseId. 
    # @param course_id 
    # @param title 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_course_title(course_id, title, opts = {})
      set_course_title_with_http_info(course_id, title, opts)
      return nil
    end

    # Set the title of a course. 
    # Sets the course title for the provided courseId. 
    # @param course_id 
    # @param title 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_course_title_with_http_info(course_id, title, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.set_course_title ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.set_course_title" if course_id.nil?
      # verify the required parameter 'title' is set
      fail ArgumentError, "Missing the required parameter 'title' when calling CourseApi.set_course_title" if title.nil?
      # resource path
      local_var_path = "/courses/{courseId}/title".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(title)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#set_course_title\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set configuration for a version of a course. 
    # Set configuration settings for this course and version. 
    # @param course_id 
    # @param version_id The course version
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def set_course_version_configuration(course_id, version_id, configuration_settings, opts = {})
      set_course_version_configuration_with_http_info(course_id, version_id, configuration_settings, opts)
      return nil
    end

    # Set configuration for a version of a course. 
    # Set configuration settings for this course and version. 
    # @param course_id 
    # @param version_id The course version
    # @param configuration_settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def set_course_version_configuration_with_http_info(course_id, version_id, configuration_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CourseApi.set_course_version_configuration ..."
      end
      # verify the required parameter 'course_id' is set
      fail ArgumentError, "Missing the required parameter 'course_id' when calling CourseApi.set_course_version_configuration" if course_id.nil?
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling CourseApi.set_course_version_configuration" if version_id.nil?
      # verify the required parameter 'configuration_settings' is set
      fail ArgumentError, "Missing the required parameter 'configuration_settings' when calling CourseApi.set_course_version_configuration" if configuration_settings.nil?
      # resource path
      local_var_path = "/courses/{courseId}/versions/{versionId}/configuration".sub('{format}','json').sub('{' + 'courseId' + '}', course_id.to_s).sub('{' + 'versionId' + '}', version_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration_settings)
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CourseApi#set_course_version_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
