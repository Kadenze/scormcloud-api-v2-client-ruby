=begin
#SCORM Cloud Rest API

#REST API used for SCORM Cloud integrations.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module RusticiSoftwareCloudV2
  class ReportingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all of the account information specified by the given app ID
    # Get all of the account information specified by the given app ID
    # @param [Hash] opts the optional parameters
    # @return [ReportageAccountInfoSchema]
    def get_account_info(opts = {})
      data, _status_code, _headers = get_account_info_with_http_info(opts)
      data
    end

    # Get all of the account information specified by the given app ID
    # Get all of the account information specified by the given app ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportageAccountInfoSchema, Fixnum, Hash)>] ReportageAccountInfoSchema data, response status code and response headers
    def get_account_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportingApi.get_account_info ...'
      end
      # resource path
      local_var_path = '/reporting/accountInfo'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportageAccountInfoSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportingApi#get_account_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a session authentication token to use when launching Reportage
    # Get a session authentication token to use when launching Reportage
    # @param nav_permission The navigation permissions for this Reportage session
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :admin Grant admin privileges to this Reportage session (default to false)
    # @return [ReportageAuthTokenSchema]
    def get_reportage_auth_token(nav_permission, opts = {})
      data, _status_code, _headers = get_reportage_auth_token_with_http_info(nav_permission, opts)
      data
    end

    # Get a session authentication token to use when launching Reportage
    # Get a session authentication token to use when launching Reportage
    # @param nav_permission The navigation permissions for this Reportage session
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :admin Grant admin privileges to this Reportage session
    # @return [Array<(ReportageAuthTokenSchema, Fixnum, Hash)>] ReportageAuthTokenSchema data, response status code and response headers
    def get_reportage_auth_token_with_http_info(nav_permission, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportingApi.get_reportage_auth_token ...'
      end
      # verify the required parameter 'nav_permission' is set
      if @api_client.config.client_side_validation && nav_permission.nil?
        fail ArgumentError, "Missing the required parameter 'nav_permission' when calling ReportingApi.get_reportage_auth_token"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['NONAV', 'DOWNONLY', 'FREENAV'].include?(nav_permission)
        fail ArgumentError, "invalid value for 'nav_permission', must be one of NONAV, DOWNONLY, FREENAV"
      end
      # resource path
      local_var_path = '/reporting/reportageAuth'

      # query parameters
      query_params = {}
      query_params[:'navPermission'] = nav_permission
      query_params[:'admin'] = opts[:'admin'] if !opts[:'admin'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportageAuthTokenSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportingApi#get_reportage_auth_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the link to a page in Reportage with the given authentication and permissions
    # Get the link to a page in Reportage with the given authentication and permissions
    # @param auth The reportage authentication token retrieved from a previous call to &#x60;GET reportageAuth&#x60;
    # @param report_url The Reportage URL to try and access
    # @param [Hash] opts the optional parameters
    # @return [ReportageLinkSchema]
    def get_reportage_link(auth, report_url, opts = {})
      data, _status_code, _headers = get_reportage_link_with_http_info(auth, report_url, opts)
      data
    end

    # Get the link to a page in Reportage with the given authentication and permissions
    # Get the link to a page in Reportage with the given authentication and permissions
    # @param auth The reportage authentication token retrieved from a previous call to &#x60;GET reportageAuth&#x60;
    # @param report_url The Reportage URL to try and access
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportageLinkSchema, Fixnum, Hash)>] ReportageLinkSchema data, response status code and response headers
    def get_reportage_link_with_http_info(auth, report_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReportingApi.get_reportage_link ...'
      end
      # verify the required parameter 'auth' is set
      if @api_client.config.client_side_validation && auth.nil?
        fail ArgumentError, "Missing the required parameter 'auth' when calling ReportingApi.get_reportage_link"
      end
      # verify the required parameter 'report_url' is set
      if @api_client.config.client_side_validation && report_url.nil?
        fail ArgumentError, "Missing the required parameter 'report_url' when calling ReportingApi.get_reportage_link"
      end
      # resource path
      local_var_path = '/reporting/reportageLink'

      # query parameters
      query_params = {}
      query_params[:'auth'] = auth
      query_params[:'reportUrl'] = report_url

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['APP_NORMAL', 'OAUTH']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ReportageLinkSchema')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReportingApi#get_reportage_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
